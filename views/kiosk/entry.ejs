<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visitor Registration - TerraConnection</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        @keyframes gradientBG {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes pulse {
            0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(138, 43, 226, 0.7); }
            70% { transform: scale(1.05); box-shadow: 0 0 0 10px rgba(138, 43, 226, 0); }
            100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(138, 43, 226, 0); }
        }

        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            background: linear-gradient(-45deg, #6a0dad, #4b0082, #8a2be2, #9400d3);
            background-size: 400% 400%;
            animation: gradientBG 15s ease infinite;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .kiosk-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .kiosk-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at center, transparent 0%, rgba(0,0,0,0.3) 100%);
            pointer-events: none;
        }

        .kiosk-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 100%;
            animation: fadeInUp 0.8s ease-out;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .kiosk-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
        }

        .kiosk-header {
            background: linear-gradient(135deg, #6a0dad, #8a2be2);
            color: white;
            padding: 30px;
            text-align: center;
            border-radius: 20px 20px 0 0;
        }

        .kiosk-header h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 700;
            text-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .kiosk-header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1rem;
            text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .kiosk-body {
            padding: 40px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            font-weight: 600;
            color: #6a0dad;
            margin-bottom: 8px;
            font-size: 1.1rem;
            text-shadow: 0 2px 4px rgba(106, 13, 173, 0.1);
        }

        .form-control {
            border: 2px solid rgba(138, 43, 226, 0.2);
            border-radius: 15px;
            padding: 15px;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(5px);
        }

        .form-control:focus {
            border-color: #8a2be2;
            box-shadow: 0 0 0 0.2rem rgba(138, 43, 226, 0.25);
            background: rgba(255, 255, 255, 1);
            transform: translateY(-2px);
        }

        .camera-section {
            background: rgba(138, 43, 226, 0.05);
            border: 2px solid rgba(138, 43, 226, 0.1);
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            margin: 25px 0;
            backdrop-filter: blur(5px);
            box-shadow: 0 4px 15px rgba(138, 43, 226, 0.1);
        }

        .camera-section h4 {
            color: #6a0dad;
            font-weight: 600;
            margin-bottom: 15px;
            text-shadow: 0 2px 4px rgba(106, 13, 173, 0.1);
        }

        .camera-container {
            position: relative;
            display: inline-block;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 8px 25px rgba(106, 13, 173, 0.2);
            border: 3px solid rgba(138, 43, 226, 0.3);
        }

        #video {
            width: 320px;
            height: 240px;
            border-radius: 15px;
            object-fit: cover;
            background: #f8f9fa;
        }

        #canvas {
            display: none;
        }

        .camera-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(138, 43, 226, 0.1);
            display: none;
            align-items: center;
            justify-content: center;
            border-radius: 15px;
        }

        .captured-image {
            max-width: 320px;
            max-height: 240px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(106, 13, 173, 0.2);
            border: 3px solid rgba(138, 43, 226, 0.3);
        }

        .btn-kiosk {
            padding: 15px 30px;
            font-size: 1.2rem;
            font-weight: 600;
            border-radius: 10px;
            border: none;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #6a0dad 0%, #8a2be2 100%);
            color: white;
            border: none;
            box-shadow: 0 4px 15px rgba(106, 13, 173, 0.3);
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #8a2be2 0%, #6a0dad 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(106, 13, 173, 0.4);
            color: white;
        }

        .btn-success {
            background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
            color: white;
            border: none;
            box-shadow: 0 4px 15px rgba(39, 174, 96, 0.3);
        }

        .btn-success:hover {
            background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(39, 174, 96, 0.4);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
            color: white;
            border: none;
            box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
        }

        .btn-warning:hover {
            background: linear-gradient(135deg, #e67e22 0%, #f39c12 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(243, 156, 18, 0.4);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            color: white;
            border: none;
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #495057 0%, #6c757d 100%);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
            color: white;
        }

        .status-message {
            padding: 15px;
            border-radius: 12px;
            margin: 20px 0;
            font-weight: 600;
            text-align: center;
            backdrop-filter: blur(10px);
            border: none;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .status-success {
            background: rgba(40, 167, 69, 0.1);
            color: #28a745;
            border: 1px solid rgba(40, 167, 69, 0.2);
        }

        .status-error {
            background: rgba(220, 53, 69, 0.1);
            color: #dc3545;
            border: 1px solid rgba(220, 53, 69, 0.2);
        }

        .status-info {
            background: rgba(106, 13, 173, 0.1);
            color: #6a0dad;
            border: 1px solid rgba(106, 13, 173, 0.2);
        }

        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner-border {
            width: 3rem;
            height: 3rem;
        }

        .camera-instructions {
            color: #6c757d;
            font-size: 0.9rem;
            margin-top: 10px;
        }

        .form-footer {
            background: rgba(138, 43, 226, 0.05);
            padding: 30px;
            text-align: center;
            border-top: 1px solid rgba(138, 43, 226, 0.1);
            backdrop-filter: blur(5px);
        }

        @media (max-width: 768px) {
            .kiosk-container {
                padding: 10px;
            }
            
            .kiosk-body {
                padding: 20px;
            }
            
            .kiosk-header h1 {
                font-size: 2rem;
            }
            
            #video {
                width: 280px;
                height: 210px;
            }
        }
    </style>
</head>
<body>
    <div class="kiosk-container">
        <div class="kiosk-card">
            <div class="kiosk-header">
                <img src="/logo.png" alt="TerraConnection" style="max-width: 200px; max-height: 80px; width: auto; height: auto; margin-bottom: 1rem; transition: all 0.3s ease;" onerror="this.style.display='none'">
                <h1><i class="fas fa-user-plus"></i> Visitor Registration</h1>
                <p>Welcome to TerraConnection. Please register your visit below.</p>
            </div>

            <div class="kiosk-body">
                <form id="visitorForm">
                    <div class="form-group">
                        <label for="name" class="form-label">
                            <i class="fas fa-user"></i> Full Name *
                        </label>
                        <input type="text" class="form-control" id="name" name="name" required 
                               placeholder="Enter your full name" maxlength="100">
                    </div>

                    <div class="form-group">
                        <label for="purpose" class="form-label">
                            <i class="fas fa-clipboard-list"></i> Purpose of Visit *
                        </label>
                        <textarea class="form-control" id="purpose" name="purpose" rows="3" required
                                  placeholder="Please describe the purpose of your visit" maxlength="500"></textarea>
                    </div>

                    <div class="camera-section">
                        <h4><i class="fas fa-camera"></i> Face Verification</h4>
                        <p class="camera-instructions">
                            Please position yourself in front of the camera for face verification.
                            This helps us identify you when you exit.
                        </p>

                        <div class="camera-container">
                            <video id="video" autoplay playsinline></video>
                            <canvas id="canvas"></canvas>
                            <div class="camera-overlay" id="cameraOverlay">
                                <i class="fas fa-camera fa-3x text-white"></i>
                            </div>
                        </div>

                        <div id="capturedImageContainer" style="display: none;">
                            <img id="capturedImage" class="captured-image" alt="Captured face">
                        </div>

                        <div class="mt-3">
                            <button type="button" id="startCameraBtn" class="btn btn-primary btn-kiosk me-2">
                                <i class="fas fa-video"></i> Start Camera
                            </button>
                            <button type="button" id="captureBtn" class="btn btn-success btn-kiosk me-2" disabled>
                                <i class="fas fa-camera"></i> Capture Photo
                            </button>
                            <button type="button" id="retakeBtn" class="btn btn-warning btn-kiosk" style="display: none;">
                                <i class="fas fa-redo"></i> Retake Photo
                            </button>
                        </div>
                    </div>

                    <div id="statusMessage"></div>

                    <div class="loading-spinner" id="loadingSpinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Processing...</span>
                        </div>
                        <p class="mt-2">Registering your visit...</p>
                    </div>
                </form>
            </div>

            <div class="form-footer">
                <button type="button" class="btn btn-secondary btn-kiosk me-2" onclick="window.location.href='/kiosk/'">
                    <i class="fas fa-arrow-left"></i> Back to Main Menu
                </button>
                <button type="submit" form="visitorForm" id="submitBtn" class="btn btn-success btn-kiosk">
                    <i class="fas fa-check"></i> Register Visit
                </button>
                <p class="mt-3 text-muted">
                    <small>By registering, you agree to follow all facility guidelines and policies.</small>
                </p>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Face-API.js CDN -->
    <script defer src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js" 
            onload="console.log('✅ Face-API.js loaded successfully'); window.faceApiLoaded = true;" 
            onerror="console.error('❌ Failed to load Face-API.js'); window.faceApiLoaded = false;"></script>
    <script>
        class VisitorRegistration {
            constructor() {
                this.video = document.getElementById('video');
                this.canvas = document.getElementById('canvas');
                this.ctx = this.canvas.getContext('2d');
                this.capturedImageData = null;
                this.capturedFaceDescriptor = null;
                this.stream = null;
                this.faceDetectionInitialized = false;
                this.usingTinyDetector = true;
                this.autoCapturing = false;
                this.captureIndicatorInterval = null;

                // Face detection constants (tightened for better discrimination)
                this.FACE_MATCH_THRESHOLD = 0.4; // Reduced from 0.6 for stricter matching
                this.TINY_INPUT_SIZE = 320;
                this.TINY_SCORE_THRESHOLD = 0.65; // Increased from 0.55 for better detection quality

                this.initializeEventListeners();
                this.initializeFaceDetection();
            }

            initializeEventListeners() {
                document.getElementById('startCameraBtn').addEventListener('click', () => this.startCamera());
                document.getElementById('captureBtn').addEventListener('click', () => this.capturePhoto());
                document.getElementById('retakeBtn').addEventListener('click', () => this.retakePhoto());
                document.getElementById('visitorForm').addEventListener('submit', (e) => this.handleSubmit(e));
            }

            // Initialize face-api.js models (same as RFID scanner)
            async initializeFaceDetection() {
                if (this.faceDetectionInitialized) {
                    console.log('Face detection already initialized');
                    return;
                }

                try {
                    // Check if face-api is available
                    if (typeof faceapi === 'undefined') {
                        console.log('Face-API.js not yet loaded, will retry...');
                        setTimeout(() => this.initializeFaceDetection(), 1000);
                        return;
                    }

                    console.log('Loading face detection models...');

                    // Set TF backend to WebGL for performance
                    try {
                        if (faceapi.tf && typeof faceapi.tf.setBackend === 'function') {
                            await faceapi.tf.setBackend('webgl');
                            await faceapi.tf.ready();
                            console.log('✅ TFJS backend set to WebGL');
                        }
                    } catch (e) {
                        console.warn('WebGL backend not available, falling back to CPU:', e.message);
                        try {
                            await faceapi.tf.setBackend('cpu');
                            await faceapi.tf.ready();
                        } catch (e2) {
                            console.warn('CPU backend setup warning:', e2.message);
                        }
                    }

                    // Load models from local files
                    console.log('Loading face detection models from /models...');

                    let tinyLoaded = false;
                    if (this.usingTinyDetector) {
                        try {
                            console.log('Loading tiny face detector models...');
                            await faceapi.nets.tinyFaceDetector.loadFromUri('/models');
                            if (faceapi.nets.faceLandmark68TinyNet) {
                                await faceapi.nets.faceLandmark68TinyNet.loadFromUri('/models');
                            } else {
                                await faceapi.nets.faceLandmark68Net.loadFromUri('/models');
                            }
                            await faceapi.nets.faceRecognitionNet.loadFromUri('/models');
                            tinyLoaded = true;
                            console.log('✅ Tiny models loaded');
                        } catch (e) {
                            console.warn('Tiny models not available, will use SSD:', e.message);
                            this.usingTinyDetector = false;
                        }
                    }

                    if (!tinyLoaded) {
                        console.log('Loading SSD MobileNet models...');
                        await faceapi.nets.ssdMobilenetv1.loadFromUri('/models');
                        await faceapi.nets.faceLandmark68Net.loadFromUri('/models');
                        await faceapi.nets.faceRecognitionNet.loadFromUri('/models');
                        console.log('✅ SSD models loaded');
                    }

                    // Warm-up pass
                    try {
                        const tmp = document.createElement('canvas');
                        tmp.width = 64; 
                        tmp.height = 64;
                        const opts = this.usingTinyDetector
                            ? new faceapi.TinyFaceDetectorOptions({ inputSize: 128, scoreThreshold: 0.6 })
                            : new faceapi.SsdMobilenetv1Options({ minConfidence: 0.6 });
                        await faceapi.detectSingleFace(tmp, opts);
                        console.log('✅ Face detection warm-up complete');
                    } catch (e) {
                        console.warn('Warm-up pass failed (non-fatal):', e.message);
                    }

                    this.faceDetectionInitialized = true;
                    console.log('✅ Face detection initialized successfully');

                } catch (error) {
                    console.error('❌ Error loading face-api models:', error);
                    this.faceDetectionInitialized = false;
                }
            }

            async startCamera() {
                try {
                    this.stream = await navigator.mediaDevices.getUserMedia({ 
                        video: { 
                            width: 640, 
                            height: 480,
                            facingMode: 'user'
                        } 
                    });
                    
                    this.video.srcObject = this.stream;
                    
                    document.getElementById('startCameraBtn').disabled = true;
                    document.getElementById('captureBtn').disabled = false;
                    
                    this.showStatus('Camera started. Preparing to capture face automatically...', 'info');
                    
                    // Wait for video to be ready then start auto-capture
                    this.video.addEventListener('loadedmetadata', () => {
                        setTimeout(() => {
                            this.startAutoCapture();
                        }, 1500); // Give user 1.5 seconds to position themselves
                    });
                } catch (error) {
                    console.error('Error accessing camera:', error);
                    this.showStatus('Error accessing camera. Please ensure camera permissions are granted.', 'error');
                }
            }

            // Validate face quality for better matching accuracy
            validateFaceQuality(detection) {
                const box = detection.detection.box;
                const landmarks = detection.landmarks;
                
                // Check face size (should be reasonable size in frame)
                const faceArea = box.width * box.height;
                const videoArea = this.video.videoWidth * this.video.videoHeight;
                const faceRatio = faceArea / videoArea;
                
                if (faceRatio < 0.02) { // Face too small (less than 2% of frame)
                    return { valid: false, reason: 'Face too small in frame. Please move closer.' };
                }
                
                if (faceRatio > 0.5) { // Face too large (more than 50% of frame)
                    return { valid: false, reason: 'Face too close. Please move back slightly.' };
                }
                
                // Check face centering
                const faceCenterX = box.x + box.width / 2;
                const faceCenterY = box.y + box.height / 2;
                const videoCenterX = this.video.videoWidth / 2;
                const videoCenterY = this.video.videoHeight / 2;
                
                const centerOffsetX = Math.abs(faceCenterX - videoCenterX) / this.video.videoWidth;
                const centerOffsetY = Math.abs(faceCenterY - videoCenterY) / this.video.videoHeight;
                
                if (centerOffsetX > 0.3 || centerOffsetY > 0.3) {
                    return { valid: false, reason: 'Please center your face in the camera.' };
                }
                
                // Check if face is reasonably straight (using landmarks if available)
                if (landmarks && landmarks.positions) {
                    const leftEye = landmarks.positions[36];
                    const rightEye = landmarks.positions[45];
                    
                    if (leftEye && rightEye) {
                        const eyeDistance = Math.sqrt(
                            Math.pow(rightEye.x - leftEye.x, 2) + 
                            Math.pow(rightEye.y - leftEye.y, 2)
                        );
                        
                        // Check if eyes are too tilted (face rotation)
                        const eyeAngle = Math.abs(Math.atan2(rightEye.y - leftEye.y, rightEye.x - leftEye.x));
                        if (eyeAngle > 0.35) { // About 20 degrees
                            return { valid: false, reason: 'Please keep your head straight.' };
                        }
                    }
                }
                
                return { valid: true, reason: 'Face quality is good' };
            }

            async capturePhoto() {
                try {
                    if (!this.faceDetectionInitialized) {
                        this.showStatus('Face detection not ready. Please wait...', 'error');
                        return;
                    }

                    this.showStatus('Analyzing face...', 'info');
                    
                    this.canvas.width = this.video.videoWidth;
                    this.canvas.height = this.video.videoHeight;
                    this.ctx.drawImage(this.video, 0, 0);
                    
                    this.capturedImageData = this.canvas.toDataURL('image/jpeg', 0.8);

                    // Detect face and generate descriptor
                    console.log('Detecting face in captured image...');
                    const opts = this.usingTinyDetector
                        ? new faceapi.TinyFaceDetectorOptions({ 
                            inputSize: this.TINY_INPUT_SIZE, 
                            scoreThreshold: this.TINY_SCORE_THRESHOLD 
                          })
                        : new faceapi.SsdMobilenetv1Options({ minConfidence: 0.6 });

                    const detections = await faceapi.detectSingleFace(this.video, opts)
                        .withFaceLandmarks(this.usingTinyDetector)
                        .withFaceDescriptor();

                    if (!detections) {
                        this.showStatus('No face detected in the image. Please ensure your face is clearly visible and try again.', 'error');
                        return;
                    }

                    // Validate face quality before accepting
                    const qualityCheck = this.validateFaceQuality(detections);
                    if (!qualityCheck.valid) {
                        this.showStatus(qualityCheck.reason, 'error');
                        return;
                    }

                    // Store the face descriptor
                    this.capturedFaceDescriptor = Array.from(detections.descriptor);
                    console.log('✅ Face detected and descriptor generated with good quality');
                    
                    const capturedImage = document.getElementById('capturedImage');
                    capturedImage.src = this.capturedImageData;
                    
                    document.getElementById('capturedImageContainer').style.display = 'block';
                    document.getElementById('video').style.display = 'none';
                    document.getElementById('captureBtn').style.display = 'none';
                    document.getElementById('retakeBtn').style.display = 'inline-block';
                    
                    this.stopCamera();
                    this.stopAutoCapture();
                    this.showStatus('Photo captured and face verified successfully!', 'success');
                    
                } catch (error) {
                    console.error('Error capturing photo:', error);
                    this.showStatus('Error analyzing face. Please try again.', 'error');
                }
            }

            retakePhoto() {
                document.getElementById('capturedImageContainer').style.display = 'none';
                document.getElementById('video').style.display = 'block';
                document.getElementById('captureBtn').style.display = 'inline-block';
                document.getElementById('retakeBtn').style.display = 'none';
                
                this.capturedImageData = null;
                this.capturedFaceDescriptor = null;
                this.stopAutoCapture();
                this.startCamera();
            }

            stopCamera() {
                if (this.stream) {
                    this.stream.getTracks().forEach(track => track.stop());
                    this.stream = null;
                }
            }

            async handleSubmit(event) {
                event.preventDefault();
                
                const name = document.getElementById('name').value.trim();
                const purpose = document.getElementById('purpose').value.trim();
                
                if (!name || !purpose) {
                    this.showStatus('Please fill in all required fields.', 'error');
                    return;
                }

                if (name.length < 2 || name.length > 100) {
                    this.showStatus('Name must be between 2 and 100 characters.', 'error');
                    return;
                }

                if (purpose.length < 5 || purpose.length > 500) {
                    this.showStatus('Purpose must be between 5 and 500 characters.', 'error');
                    return;
                }

                this.showLoading(true);
                
                try {
                    const formData = {
                        name: name,
                        purpose: purpose,
                        faceImage: this.capturedImageData,
                        faceDescriptor: this.capturedFaceDescriptor
                    };

                    const response = await fetch('/api/kiosk/visitor/register', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });

                    const result = await response.json();

                    if (result.success) {
                        this.showStatus(result.message, 'success');
                        this.showSuccessScreen(result.data);
                    } else {
                        this.showStatus(result.error || 'Registration failed. Please try again.', 'error');
                    }
                } catch (error) {
                    console.error('Registration error:', error);
                    this.showStatus('Network error. Please check your connection and try again.', 'error');
                } finally {
                    this.showLoading(false);
                }
            }
            
            startAutoCapture() {
                if (this.autoCapturing) return;
                
                this.autoCapturing = true;
                this.showStatus('🔍 Detecting face... Please look at the camera', 'info');
                
                // Show capturing indicator
                this.showCaptureIndicator(true);
                
                // Start attempting to capture face every 2 seconds
                const attemptCapture = async () => {
                    if (!this.autoCapturing || this.capturedImageData) return;
                    
                    try {
                        if (!this.faceDetectionInitialized) {
                            console.log('Face detection not ready, retrying in 2 seconds...');
                            setTimeout(attemptCapture, 2000);
                            return;
                        }
                        
                        // Check if face is detected
                        const opts = this.usingTinyDetector
                            ? new faceapi.TinyFaceDetectorOptions({ 
                                inputSize: this.TINY_INPUT_SIZE, 
                                scoreThreshold: this.TINY_SCORE_THRESHOLD 
                              })
                            : new faceapi.SsdMobilenetv1Options({ minConfidence: 0.6 });

                        const detections = await faceapi.detectSingleFace(this.video, opts)
                            .withFaceLandmarks(this.usingTinyDetector)
                            .withFaceDescriptor();

                        if (detections) {
                            console.log('Face detected! Auto-capturing...');
                            this.showStatus('✅ Face detected! Capturing photo...', 'success');
                            await this.capturePhoto();
                        } else {
                            // Keep trying
                            setTimeout(attemptCapture, 2000);
                        }
                    } catch (error) {
                        console.error('Auto-capture error:', error);
                        setTimeout(attemptCapture, 2000);
                    }
                };
                
                // Start the auto-capture process
                setTimeout(attemptCapture, 1000);
                
                // Stop auto-capture after 30 seconds if no face found
                setTimeout(() => {
                    if (this.autoCapturing && !this.capturedImageData) {
                        this.stopAutoCapture();
                        this.showStatus('Auto-capture timed out. Please use the manual capture button.', 'warning');
                    }
                }, 30000);
            }
            
            stopAutoCapture() {
                this.autoCapturing = false;
                this.showCaptureIndicator(false);
            }
            
            showCaptureIndicator(show) {
                const cameraContainer = document.querySelector('.camera-container');
                
                if (show && !this.captureIndicatorInterval) {
                    // Add pulsing border effect
                    cameraContainer.style.border = '3px solid #28a745';
                    cameraContainer.style.boxShadow = '0 0 20px rgba(40, 167, 69, 0.5)';
                    
                    // Pulsing animation
                    let pulse = true;
                    this.captureIndicatorInterval = setInterval(() => {
                        if (pulse) {
                            cameraContainer.style.borderColor = '#17a2b8';
                            cameraContainer.style.boxShadow = '0 0 25px rgba(23, 162, 184, 0.7)';
                        } else {
                            cameraContainer.style.borderColor = '#28a745';
                            cameraContainer.style.boxShadow = '0 0 20px rgba(40, 167, 69, 0.5)';
                        }
                        pulse = !pulse;
                    }, 800);
                } else if (!show && this.captureIndicatorInterval) {
                    clearInterval(this.captureIndicatorInterval);
                    this.captureIndicatorInterval = null;
                    
                    // Reset to normal border
                    cameraContainer.style.border = '3px solid rgba(138, 43, 226, 0.3)';
                    cameraContainer.style.boxShadow = '0 8px 25px rgba(106, 13, 173, 0.2)';
                }
            }

            startCountdown(seconds, callback) {
                let remaining = seconds;
                const countdownElement = document.getElementById('countdown');
                
                const updateCountdown = () => {
                    if (countdownElement) {
                        countdownElement.textContent = remaining;
                    }
                    
                    if (remaining <= 0) {
                        callback();
                    } else {
                        remaining--;
                        setTimeout(updateCountdown, 1000);
                    }
                };
                
                updateCountdown();
            }

            showSuccessScreen(visitorData) {
                const kioskBody = document.querySelector('.kiosk-body');
                const formFooter = document.querySelector('.form-footer');
                
                kioskBody.innerHTML = `
                    <div class="text-center">
                        <div class="mb-4">
                            <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        </div>
                        <h2 class="text-success mb-3">Registration Successful!</h2>
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Welcome, ${visitorData.name}!</h5>
                                <p class="card-text">
                                    <strong>Visitor ID:</strong> ${visitorData.id}<br>
                                    <strong>Entry Time:</strong> ${new Date(visitorData.entryTime).toLocaleString()}<br>
                                    <strong>Purpose:</strong> ${visitorData.purpose}<br>
                                    <strong>Face Verification:</strong> ${visitorData.hasFaceImage ? 'Enabled' : 'Skipped'}
                                </p>
                            </div>
                        </div>
                        <div class="mt-4">
                            <p class="text-muted">
                                Please keep this information for your records. 
                                ${visitorData.hasFaceImage ? 'Use the exit kiosk when leaving.' : ''}
                            </p>
                            <div id="countdownDisplay" class="mt-4">
                                <div class="alert alert-info d-inline-block" style="border-radius: 15px; border: 2px solid #17a2b8; background: linear-gradient(135deg, rgba(23, 162, 184, 0.1), rgba(23, 162, 184, 0.05));">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-clock fa-lg me-2" style="color: #17a2b8;"></i>
                                        <span class="fw-bold" style="color: #0c5460;">Returning to main menu in</span>
                                        <span id="countdown" class="badge bg-primary ms-2 me-2" style="font-size: 1.2rem; padding: 8px 12px;">7</span>
                                        <span class="fw-bold" style="color: #0c5460;">seconds...</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                formFooter.innerHTML = `
                    <button type="button" class="btn btn-primary btn-kiosk" onclick="window.location.href='/kiosk/'">
                        <i class="fas fa-home"></i> Return to Main Menu
                    </button>
                `;

                // Start countdown and auto-redirect
                this.startCountdown(7, () => {
                    window.location.href = '/kiosk/';
                });
            }

            showStatus(message, type) {
                const statusDiv = document.getElementById('statusMessage');
                statusDiv.innerHTML = `<div class="status-message status-${type}">${message}</div>`;
                
                // Auto-hide success messages after 5 seconds
                if (type === 'success') {
                    setTimeout(() => {
                        statusDiv.innerHTML = '';
                    }, 5000);
                }
            }

            showLoading(show) {
                const loadingSpinner = document.getElementById('loadingSpinner');
                const submitBtn = document.getElementById('submitBtn');
                
                if (show) {
                    loadingSpinner.style.display = 'block';
                    submitBtn.disabled = true;
                } else {
                    loadingSpinner.style.display = 'none';
                    submitBtn.disabled = false;
                }
            }
        }

        // Initialize the visitor registration system
        document.addEventListener('DOMContentLoaded', () => {
            new VisitorRegistration();
        });

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            if (window.visitorRegistration && window.visitorRegistration.stream) {
                window.visitorRegistration.stopCamera();
            }
        });
    </script>
</body>
</html>
