<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Audit Logs</title>
  <link rel="stylesheet" href="/css/app.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    .filters {
      background: #f8f9fa;
      padding: 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 20px;
    }
    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .chart-container {
      height: 300px;
      margin-bottom: 20px;
    }
    .log-details {
      font-family: monospace;
      font-size: 0.9em;
      max-height: 200px;
      overflow-y: auto;
      background: #f8f9fa;
      padding: 10px;
      border-radius: 4px;
      white-space: pre-wrap;
      word-break: break-word;
    }
    .status-badge {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 0.8em;
      font-weight: 500;
      display: inline-block;
    }
    .status-success { background: #d4edda; color: #155724; }
    .status-error { background: #f8d7da; color: #721c24; }
    .status-warning { background: #fff3cd; color: #856404; }
    .status-info { background: #d1ecf1; color: #0c5460; }
    .action-type-badge {
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.85em;
      font-weight: 500;
      white-space: normal;
      word-wrap: break-word;
      display: inline-block;
      max-width: 100%;
    }
    .metadata-tooltip {
      position: relative;
      display: inline-block;
      cursor: pointer;
    }
    .metadata-tooltip .tooltip-content {
      visibility: hidden;
      background-color: #555;
      color: #fff;
      text-align: left;
      border-radius: 6px;
      padding: 10px;
      position: absolute;
      z-index: 1;
      bottom: 125%;
      left: 50%;
      margin-left: -100px;
      opacity: 0;
      transition: opacity 0.3s;
      width: 200px;
      font-size: 0.8em;
    }
    .metadata-tooltip:hover .tooltip-content {
      visibility: visible;
      opacity: 1;
    }
    .quick-filters {
      display: flex;
      gap: 10px;
      margin-bottom: 15px;
      flex-wrap: wrap;
    }
    .quick-filter {
      padding: 5px 10px;
      border-radius: 15px;
      background: #e9ecef;
      cursor: pointer;
      font-size: 0.9em;
      transition: all 0.2s;
    }
    .quick-filter:hover {
      background: #dee2e6;
    }
    .quick-filter.active {
      background: #007bff;
      color: white;
    }
    .expandable-cell {
      cursor: pointer;
    }
    .expandable-cell.expanded .log-details {
      max-height: none;
    }
    .severity-high { color: #dc3545; }
    .severity-medium { color: #ffc107; }
    .severity-low { color: #28a745; }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    .spin {
      animation: spin 1s linear infinite;
      display: inline-block;
    }
    
    .btn:disabled {
      cursor: not-allowed;
      opacity: 0.7;
    }
    
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h2>Audit Logs</h2>
      <div class="btn-group">
        <button class="btn btn-outline-secondary" onclick="exportLogs('csv', event)">
          <i class="bi bi-file-earmark-spreadsheet"></i> Export CSV
        </button>
        <button class="btn btn-outline-secondary" onclick="exportLogs('json', event)">
          <i class="bi bi-file-earmark-code"></i> Export JSON
        </button>
      </div>
    </div>
    
    <!-- Quick Filters -->
    <div class="quick-filters">
      <div class="quick-filter <%= !filters.actionType ? 'active' : '' %>" data-type="all">All</div>
      <div class="quick-filter <%= filters.actionType?.startsWith('SECURITY_') ? 'active' : '' %>" data-type="security">Security Events</div>
      <div class="quick-filter <%= filters.actionType?.startsWith('ANOMALY_') ? 'active' : '' %>" data-type="anomaly">Anomalies</div>
      <div class="quick-filter <%= filters.actionType?.startsWith('RFID_') ? 'active' : '' %>" data-type="rfid">RFID Events</div>
      <div class="quick-filter <%= filters.actionType?.startsWith('LOCATION_') ? 'active' : '' %>" data-type="location">Location Events</div>
      <div class="quick-filter <%= filters.actionType?.startsWith('USER_') ? 'active' : '' %>" data-type="user">User Actions</div>
      <div class="quick-filter <%= filters.actionType?.startsWith('DATA_') ? 'active' : '' %>" data-type="data">Data Operations</div>
    </div>

    <!-- Advanced Search Filters -->
    <div class="filters">
      <form id="searchForm" method="GET" class="row g-3">
        <input type="hidden" name="page" value="1">
        <div class="col-md-3">
          <label class="form-label">Start Date</label>
          <input type="datetime-local" class="form-control" name="startDate" value="<%= filters.startDate || '' %>">
        </div>
        <div class="col-md-3">
          <label class="form-label">End Date</label>
          <input type="datetime-local" class="form-control" name="endDate" value="<%= filters.endDate || '' %>">
        </div>
        <div class="col-md-3">
          <label class="form-label">Action Type</label>
          <select class="form-control" name="actionType">
            <option value="">All Actions</option>
            <optgroup label="User Actions">
              <option value="USER_LOGIN" <%= filters.actionType === 'USER_LOGIN' ? 'selected' : '' %>>Login</option>
              <option value="USER_LOGOUT" <%= filters.actionType === 'USER_LOGOUT' ? 'selected' : '' %>>Logout</option>
              <option value="USER_PROFILE" <%= filters.actionType === 'USER_PROFILE' ? 'selected' : '' %>>Profile Updates</option>
            </optgroup>
            <optgroup label="Security Events">
              <option value="SECURITY_" <%= filters.actionType === 'SECURITY_' ? 'selected' : '' %>>All Security</option>
              <option value="SECURITY_LOGIN_FAILED" <%= filters.actionType === 'SECURITY_LOGIN_FAILED' ? 'selected' : '' %>>Login Failures</option>
              <option value="SECURITY_UNAUTHORIZED" <%= filters.actionType === 'SECURITY_UNAUTHORIZED' ? 'selected' : '' %>>Unauthorized Access</option>
            </optgroup>
            <optgroup label="RFID Events">
              <option value="RFID_" <%= filters.actionType === 'RFID_' ? 'selected' : '' %>>All RFID</option>
              <option value="RFID_ACCESS_GRANTED" <%= filters.actionType === 'RFID_ACCESS_GRANTED' ? 'selected' : '' %>>Access Granted</option>
              <option value="RFID_ACCESS_DENIED" <%= filters.actionType === 'RFID_ACCESS_DENIED' ? 'selected' : '' %>>Access Denied</option>
            </optgroup>
            <optgroup label="Location Events">
              <option value="LOCATION_" <%= filters.actionType === 'LOCATION_' ? 'selected' : '' %>>All Location</option>
              <option value="LOCATION_UPDATE" <%= filters.actionType === 'LOCATION_UPDATE' ? 'selected' : '' %>>Updates</option>
              <option value="LOCATION_BOUNDARY" <%= filters.actionType === 'LOCATION_BOUNDARY' ? 'selected' : '' %>>Boundary Events</option>
            </optgroup>
          </select>
        </div>
        <div class="col-md-3">
          <label class="form-label">Status</label>
          <select class="form-control" name="status">
            <option value="">All Status</option>
            <option value="success" <%= filters.status === 'success' ? 'selected' : '' %>>Success</option>
            <option value="failed" <%= filters.status === 'failed' ? 'selected' : '' %>>Failed</option>
            <option value="denied" <%= filters.status === 'denied' ? 'selected' : '' %>>Denied</option>
          </select>
        </div>
        <div class="col-md-6">
          <label class="form-label">Search Term</label>
          <input type="text" class="form-control" name="searchTerm" value="<%= filters.searchTerm %>" placeholder="Search in logs...">
        </div>
        <div class="col-md-3">
          <label class="form-label">Severity</label>
          <select class="form-control" name="severity">
            <option value="">All Severity</option>
            <option value="high" <%= filters.severity === 'high' ? 'selected' : '' %>>High</option>
            <option value="medium" <%= filters.severity === 'medium' ? 'selected' : '' %>>Medium</option>
            <option value="low" <%= filters.severity === 'low' ? 'selected' : '' %>>Low</option>
          </select>
        </div>
        <div class="col-md-3">
          <label class="form-label">Records per page</label>
          <select class="form-control" name="limit">
            <option value="10" <%= filters.limit === 10 ? 'selected' : '' %>>10</option>
            <option value="25" <%= filters.limit === 25 ? 'selected' : '' %>>25</option>
            <option value="50" <%= filters.limit === 50 ? 'selected' : '' %>>50</option>
            <option value="100" <%= filters.limit === 100 ? 'selected' : '' %>>100</option>
          </select>
        </div>
        <div class="col-12">
          <button type="submit" class="btn btn-primary">
            <i class="bi bi-search"></i> Apply Filters
          </button>
          <a href="/admin/audit-logs" class="btn btn-secondary">
            <i class="bi bi-x-circle"></i> Reset
          </a>
        </div>
      </form>
    </div>

    <!-- Analytics Dashboard -->
    <div class="stats-grid">
      <!-- Action Type Distribution -->
      <div class="stat-card">
        <h4>Action Distribution</h4>
        <div class="chart-container">
          <canvas id="actionTypeChart"></canvas>
        </div>
      </div>

      <!-- Top Users -->
      <div class="stat-card">
        <h4>Most Active Users</h4>
        <div class="chart-container">
          <canvas id="userActivityChart"></canvas>
        </div>
      </div>

      <!-- Hourly Activity -->
      <div class="stat-card">
        <h4>24-Hour Activity</h4>
        <div class="chart-container">
          <canvas id="hourlyActivityChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Logs Table -->
    <div class="table-responsive">
      <table class="table table-bordered table-hover">
        <thead class="table-light">
          <tr>
            <th style="width: 15%">Timestamp</th>
            <th style="width: 12%">User</th>
            <th style="width: 15%">Action Type</th>
            <th style="width: 10%">Status</th>
            <th>Details</th>
            <th style="width: 5%">Meta</th>
          </tr>
        </thead>
        <tbody>
          <% logs.forEach(function(log) { %>
            <tr>
              <td style="min-width: 140px"><%= new Date(log.timestamp).toLocaleString() %></td>
              <td style="min-width: 100px">
                <% if (log.User) { %>
                  <%= log.User.first_name %> <%= log.User.last_name %>
                <% } else { %>
                  System
                <% } %>
              </td>
              <td style="min-width: 120px">
                <%
                  let actionClass = '';
                  if (log.action_type.startsWith('SECURITY_')) actionClass = 'bg-danger text-white';
                  else if (log.action_type.startsWith('ANOMALY_')) actionClass = 'bg-warning';
                  else if (log.action_type.startsWith('RFID_')) actionClass = 'bg-info text-white';
                  else if (log.action_type.startsWith('LOCATION_')) actionClass = 'bg-success text-white';
                %>
                <span class="action-type-badge <%= actionClass %>">
                  <%= log.action_type %>
                </span>
              </td>
              <td style="min-width: 80px">
                <% 
                  let details;
                  try {
                    details = JSON.parse(log.details);
                    let statusClass = '';
                    if (details.data.status === 'success') statusClass = 'status-success';
                    else if (details.data.status === 'failed') statusClass = 'status-error';
                    else if (details.data.status === 'denied') statusClass = 'status-warning';
                %>
                  <span class="status-badge <%= statusClass %>">
                    <%= details.data.status || 'N/A' %>
                  </span>
                <% } catch(e) { %>
                  <span class="status-badge status-info">Unknown</span>
                <% } %>
              </td>
              <td class="expandable-cell" style="min-width: 200px">
                <% try { %>
                  <% const details = JSON.parse(log.details); %>
                  <div class="log-details">
                    <pre class="mb-0"><%= JSON.stringify(details.data, null, 2) %></pre>
                  </div>
                <% } catch(e) { %>
                  <%= log.details %>
                <% } %>
              </td>
              <td class="text-center" style="min-width: 40px">
                <% try { %>
                  <% const details = JSON.parse(log.details); %>
                  <div class="metadata-tooltip">
                    <i class="bi bi-info-circle"></i>
                    <div class="tooltip-content">
                      <strong>Environment:</strong> <%= details.metadata.environment %><br>
                      <strong>IP:</strong> <%= details.metadata.ip || 'N/A' %><br>
                      <strong>User Agent:</strong> <%= details.metadata.userAgent || 'N/A' %><br>
                      <strong>Platform:</strong> <%= details.metadata.platform %><br>
                      <strong>Session:</strong> <%= details.metadata.sessionId || 'N/A' %>
                    </div>
                  </div>
                <% } catch(e) { %>
                  <i class="bi bi-dash-circle text-muted"></i>
                <% } %>
              </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <% if (totalPages > 1) { %>
      <nav aria-label="Page navigation" class="mt-4">
        <ul class="pagination justify-content-center">
          <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
            <a class="page-link" href="?page=1&<%= new URLSearchParams(filters).toString() %>" aria-label="First">
              <i class="bi bi-chevron-double-left"></i>
            </a>
          </li>
          <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= currentPage - 1 %>&<%= new URLSearchParams(filters).toString() %>" aria-label="Previous">
              <i class="bi bi-chevron-left"></i>
            </a>
          </li>
          
          <% 
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, startPage + 4);
            
            if (endPage - startPage < 4) {
              startPage = Math.max(1, endPage - 4);
            }
          %>

          <% if (startPage > 1) { %>
            <li class="page-item">
              <a class="page-link" href="?page=1&<%= new URLSearchParams(filters).toString() %>">1</a>
            </li>
            <% if (startPage > 2) { %>
              <li class="page-item disabled">
                <span class="page-link">...</span>
              </li>
            <% } %>
          <% } %>

          <% for(let i = startPage; i <= endPage; i++) { %>
            <li class="page-item <%= currentPage === i ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= i %>&<%= new URLSearchParams(filters).toString() %>"><%= i %></a>
            </li>
          <% } %>

          <% if (endPage < totalPages) { %>
            <% if (endPage < totalPages - 1) { %>
              <li class="page-item disabled">
                <span class="page-link">...</span>
              </li>
            <% } %>
            <li class="page-item">
              <a class="page-link" href="?page=<%= totalPages %>&<%= new URLSearchParams(filters).toString() %>"><%= totalPages %></a>
            </li>
          <% } %>
          
          <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= currentPage + 1 %>&<%= new URLSearchParams(filters).toString() %>" aria-label="Next">
              <i class="bi bi-chevron-right"></i>
            </a>
          </li>
          <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
            <a class="page-link" href="?page=<%= totalPages %>&<%= new URLSearchParams(filters).toString() %>" aria-label="Last">
              <i class="bi bi-chevron-double-right"></i>
            </a>
          </li>
        </ul>
      </nav>
    <% } %>
  </div>

  <script>
    // Action Type Distribution Chart
    const actionCtx = document.getElementById('actionTypeChart').getContext('2d');
    new Chart(actionCtx, {
      type: 'doughnut',
      data: {
        labels: JSON.parse('<%- JSON.stringify(actionStats.map(stat => stat.action_type)) %>'),
        datasets: [{
          data: JSON.parse('<%- JSON.stringify(actionStats.map(stat => stat.count)) %>'),
          backgroundColor: [
            '#4CAF50', '#2196F3', '#FFC107', '#F44336', '#9C27B0', '#FF9800'
          ]
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right',
            labels: {
              boxWidth: 12
            }
          }
        }
      }
    });

    // User Activity Chart
    const userCtx = document.getElementById('userActivityChart').getContext('2d');
    new Chart(userCtx, {
      type: 'bar',
      data: {
        labels: JSON.parse('<%- JSON.stringify(userStats.map(stat => stat.User ? `${stat.User.first_name} ${stat.User.last_name}` : "System")) %>'),
        datasets: [{
          label: 'Actions',
          data: JSON.parse('<%- JSON.stringify(userStats.map(stat => stat.count)) %>'),
          backgroundColor: '#2196F3'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    // Hourly Activity Chart
    const hourlyCtx = document.getElementById('hourlyActivityChart').getContext('2d');
    new Chart(hourlyCtx, {
      type: 'line',
      data: {
        labels: JSON.parse('<%- JSON.stringify(hourlyActivity.map(h => new Date(h.hour).toLocaleTimeString())) %>'),
        datasets: [{
          label: 'Events',
          data: JSON.parse('<%- JSON.stringify(hourlyActivity.map(h => h.count)) %>'),
          borderColor: '#4CAF50',
          tension: 0.4,
          fill: true,
          backgroundColor: 'rgba(76, 175, 80, 0.1)'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    // Handle quick filter clicks
    document.querySelectorAll('.quick-filter').forEach(filter => {
      filter.addEventListener('click', function() {
        const type = this.dataset.type;
        const form = document.getElementById('searchForm');
        const actionTypeInput = form.querySelector('[name="actionType"]');
        
        // Update active state
        document.querySelectorAll('.quick-filter').forEach(f => f.classList.remove('active'));
        this.classList.add('active');
        
        // Reset all form fields except actionType
        form.querySelectorAll('input:not([name="actionType"]), select:not([name="actionType"])').forEach(input => {
          if (input.type === 'hidden') return; // Skip hidden inputs
          if (input.type === 'datetime-local') {
            input.value = '';
          } else if (input.tagName === 'SELECT') {
            input.selectedIndex = 0;
          } else {
            input.value = '';
          }
        });
        
        // Set action type based on filter
        switch(type) {
          case 'all':
            actionTypeInput.value = '';
            break;
          case 'security':
            actionTypeInput.value = 'SECURITY_';
            break;
          case 'anomaly':
            actionTypeInput.value = 'ANOMALY_';
            break;
          case 'rfid':
            actionTypeInput.value = 'RFID_';
            break;
          case 'location':
            actionTypeInput.value = 'LOCATION_';
            break;
          case 'user':
            actionTypeInput.value = 'USER_';
            break;
          case 'data':
            actionTypeInput.value = 'DATA_';
            break;
        }
        
        // Reset page number and submit form
        const pageInput = form.querySelector('[name="page"]');
        if (pageInput) pageInput.value = '1';
        
        // Submit form
        form.submit();
      });
    });

    // Handle form submission
    document.getElementById('searchForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const submitButton = this.querySelector('button[type="submit"]');
      const originalText = submitButton.innerHTML;
      
      // Show loading state
      submitButton.disabled = true;
      submitButton.innerHTML = '<i class="bi bi-arrow-repeat spin"></i> Applying...';
      
      // Reset page number on filter change
      const pageInput = this.querySelector('[name="page"]');
      if (pageInput) pageInput.value = '1';
      
      // Submit the form
      this.submit();
    });

    // Handle expandable cells
    document.querySelectorAll('.expandable-cell').forEach(cell => {
      cell.addEventListener('click', function() {
        this.classList.toggle('expanded');
      });
    });

    // Export function
    async function exportLogs(format, event) {
      event.preventDefault();
      const button = event.target.closest('button');
      const originalText = button.innerHTML;
      
      try {
        // Show loading state
        button.disabled = true;
        button.innerHTML = `<i class="bi bi-arrow-repeat spin"></i> Exporting...`;
        
        // Get current filter values
        const form = document.getElementById('searchForm');
        const formData = new FormData(form);
        const params = new URLSearchParams(formData);
        params.append('format', format);
        
        // Create loading overlay
        const overlay = document.createElement('div');
        overlay.className = 'loading-overlay';
        overlay.innerHTML = '<div><i class="bi bi-arrow-repeat spin"></i><br>Preparing export...</div>';
        document.body.appendChild(overlay);
        
        // Fetch export data
        const response = await fetch(`/admin/audit-logs/export?${params.toString()}`);
        if (!response.ok) throw new Error('Export failed');
        
        // Get filename from response headers
        const contentDisposition = response.headers.get('content-disposition');
        const filenameMatch = contentDisposition && contentDisposition.match(/filename="(.+)"/);
        const filename = filenameMatch ? filenameMatch[1] : `audit_logs_export.${format}`;
        
        // Download the file
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        
        // Show success message
        button.innerHTML = `<i class="bi bi-check-circle"></i> Exported!`;
        setTimeout(() => {
          button.disabled = false;
          button.innerHTML = originalText;
        }, 2000);
      } catch (error) {
        console.error('Export error:', error);
        button.innerHTML = `<i class="bi bi-x-circle"></i> Export Failed`;
        setTimeout(() => {
          button.disabled = false;
          button.innerHTML = originalText;
        }, 2000);
      } finally {
        // Remove loading overlay
        const overlay = document.querySelector('.loading-overlay');
        if (overlay) document.body.removeChild(overlay);
      }
    }
  </script>
</body>
</html>
