<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Admin Dashboard</title>
  <link rel="stylesheet" href="/css/app.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    .dashboard-container {
      padding: 20px;
    }
    .dashboard-title {
      margin-bottom: 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    .stat-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      padding-left: 10px;
    }
    .stat-header h3 {
      margin: 0;
      font-size: 1.2rem;
      font-weight: 600;
    }
    .total-count {
      font-size: 0.9rem;
      color: #666;
      background: #f8f9fa;
      padding: 4px 8px;
      border-radius: 12px;
    }
    .chart-container {
      position: relative;
      height: 400px;
      width: 100%;
    }
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      animation: fadeIn 0.2s ease;
    }
    .modal-content {
      position: relative;
      background-color: #fff;
      margin: 5% auto;
      padding: 25px;
      width: 90%;
      max-width: 1000px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      animation: slideIn 0.3s ease;
    }
    .close {
      position: absolute;
      right: 20px;
      top: 15px;
      font-size: 24px;
      color: #666;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close:hover {
      color: #333;
    }
    .time-range-buttons {
      display: flex;
      gap: 10px;
      margin: 20px 0;
      flex-wrap: wrap;
    }
    .time-range-button {
      padding: 8px 16px;
      border: none;
      border-radius: 20px;
      background-color: #f0f0f0;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 0.9rem;
    }
    .time-range-button:hover {
      background-color: #e0e0e0;
    }
    .time-range-button.active {
      background-color: #2196F3;
      color: white;
    }
    .stat-summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }
    .summary-item {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      text-align: center;
    }
    .summary-item h4 {
      margin: 0;
      font-size: 0.9rem;
      color: #666;
    }
    .summary-item p {
      margin: 5px 0 0;
      font-size: 1.5rem;
      font-weight: 600;
      color: #333;
    }
    .category-badge {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.85em;
      font-weight: 500;
      margin-right: 5px;
    }
    .category-security { background: #ffebee; color: #c62828; }
    .category-rfid { background: #e3f2fd; color: #1565c0; }
    .category-location { background: #e8f5e9; color: #2e7d32; }
    .category-user { background: #fff3e0; color: #ef6c00; }
    .category-anomaly { background: #fce4ec; color: #c2185b; }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    @keyframes slideIn {
      from { transform: translateY(-20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    .loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
    }
    .loading i {
      font-size: 2rem;
      color: #2196F3;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="dashboard-container">
    <div class="dashboard-title">
      <h2>System Activity Dashboard</h2>
      <div class="btn-group">
        <button class="btn btn-outline-secondary" onclick="exportData('csv', event)">
          <i class="bi bi-file-earmark-spreadsheet"></i> Export CSV
        </button>
        <button class="btn btn-outline-secondary" onclick="exportData('json', event)">
          <i class="bi bi-file-earmark-code"></i> Export JSON
        </button>
        <button class="btn btn-outline-secondary" onclick="window.location.href='/admin/audit-logs'">
          <i class="bi bi-list-ul"></i> View Audit Logs
        </button>
      </div>
    </div>
    
    <div class="stats-grid">
      <% timeSeriesData.forEach(function(series) { 
        let categoryClass = '';
        if (series.category.includes('Security')) categoryClass = 'category-security';
        else if (series.category.includes('RFID')) categoryClass = 'category-rfid';
        else if (series.category.includes('Location')) categoryClass = 'category-location';
        else if (series.category.includes('User')) categoryClass = 'category-user';
        else if (series.category.includes('Anomaly')) categoryClass = 'category-anomaly';
      %>
        <div class="stat-card" data-prefix="<%= series.prefix %>">
          <div class="stat-header" style="border-left: 4px solid <%= categoryColors[series.category] || '#C9CBCF' %>">
            <div>
              <span class="category-badge <%= categoryClass %>"><%= series.category %></span>
              <span class="total-count">
                <i class="bi bi-activity"></i> <%= series.counts.reduce((a, b) => a + b, 0) %> events
              </span>
            </div>
            <i class="bi bi-arrows-angle-expand text-muted"></i>
          </div>
          <div class="stat-body">
            <canvas id="chart-<%= series.prefix %>" 
                    data-dates="<%= encodeURIComponent(JSON.stringify(series.dates)) %>"
                    data-counts="<%= encodeURIComponent(JSON.stringify(series.counts)) %>"
                    data-category="<%= series.category %>"
                    data-color="<%= categoryColors[series.category] || '#C9CBCF' %>"></canvas>
          </div>
        </div>
      <% }); %>
    </div>
  </div>

  <!-- Modal -->
  <div id="detailModal" class="modal">
    <div class="modal-content">
      <span class="close"><i class="bi bi-x-lg"></i></span>
      <h2 id="modalTitle"></h2>
      
      <div class="stat-summary">
        <div class="summary-item">
          <h4>Total Events</h4>
          <p id="totalEvents">0</p>
        </div>
        <div class="summary-item">
          <h4>Average per Day</h4>
          <p id="avgEvents">0</p>
        </div>
        <div class="summary-item">
          <h4>Peak Count</h4>
          <p id="peakEvents">0</p>
        </div>
        <div class="summary-item">
          <h4>Current Trend</h4>
          <p id="trendIndicator">-</p>
        </div>
      </div>

      <div class="time-range-buttons">
        <button class="time-range-button active" data-range="24h">24 Hours</button>
        <button class="time-range-button" data-range="week">Week</button>
        <button class="time-range-button" data-range="month">Month</button>
        <button class="time-range-button" data-range="year">Year</button>
      </div>

      <div class="chart-container">
        <canvas id="detailChart"></canvas>
      </div>
    </div>
  </div>

  <script>
    let currentPrefix = null;
    let detailChart = null;

    // Initialize all charts
    document.addEventListener('DOMContentLoaded', function() {
      const cards = document.querySelectorAll('.stat-card');
      cards.forEach(card => {
        const canvas = card.querySelector('canvas');
        const dates = JSON.parse(decodeURIComponent(canvas.dataset.dates));
        const counts = JSON.parse(decodeURIComponent(canvas.dataset.counts));
        const color = canvas.dataset.color;
        
        new Chart(canvas, {
          type: 'line',
          data: {
            labels: dates,
            datasets: [{
              data: counts,
              borderColor: color,
              backgroundColor: color + '20',
              fill: true,
              tension: 0.4,
              pointRadius: 0
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                enabled: true,
                mode: 'index',
                intersect: false
              }
            },
            scales: {
              x: {
                display: false
              },
              y: {
                display: false,
                beginAtZero: true
              }
            }
          }
        });
      });
    });

    // Handle card clicks
    document.querySelectorAll('.stat-card').forEach(card => {
      card.addEventListener('click', async function() {
        const prefix = this.dataset.prefix;
        currentPrefix = prefix;
        const modal = document.getElementById('detailModal');
        const modalTitle = document.getElementById('modalTitle');
        const category = this.querySelector('.category-badge').textContent;
        
        modalTitle.textContent = `${category} Activity`;
        modal.style.display = 'block';
        
        // Show initial data
        await updateDetailChart('week');
      });
    });

    // Handle modal close
    document.querySelector('.close').addEventListener('click', function() {
      document.getElementById('detailModal').style.display = 'none';
      if (detailChart) {
        detailChart.destroy();
        detailChart = null;
      }
    });

    // Handle time range buttons
    document.querySelectorAll('.time-range-button').forEach(button => {
      button.addEventListener('click', async function() {
        document.querySelectorAll('.time-range-button').forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        await updateDetailChart(this.dataset.range);
      });
    });

    // Update detail chart
    async function updateDetailChart(range) {
      if (!currentPrefix) return;
      
      const chartContainer = document.querySelector('#detailChart').parentElement;
      const loadingDiv = document.createElement('div');
      loadingDiv.className = 'loading';
      loadingDiv.innerHTML = '<i class="bi bi-arrow-repeat"></i><br>Loading...';
      chartContainer.appendChild(loadingDiv);
      
      try {
        const response = await fetch(`/admin/dashboard/data?prefix=${currentPrefix}&range=${range}`);
        if (!response.ok) throw new Error('Failed to fetch data');
        const data = await response.json();
        
        // Update summary stats
        document.getElementById('totalEvents').textContent = data.total;
        document.getElementById('avgEvents').textContent = data.average.toFixed(1);
        document.getElementById('peakEvents').textContent = data.peak;
        
        // Update trend indicator
        const trendIndicator = document.getElementById('trendIndicator');
        const trendPercentage = ((data.currentPeriod - data.previousPeriod) / data.previousPeriod * 100).toFixed(1);
        const trendIcon = trendPercentage > 0 ? '↑' : trendPercentage < 0 ? '↓' : '→';
        const trendColor = trendPercentage > 0 ? '#28a745' : trendPercentage < 0 ? '#dc3545' : '#6c757d';
        trendIndicator.innerHTML = `${trendIcon} ${Math.abs(trendPercentage)}%`;
        trendIndicator.style.color = trendColor;
        
        // Update chart
        if (detailChart) detailChart.destroy();
        
        detailChart = new Chart(document.getElementById('detailChart'), {
          type: 'line',
          data: {
            labels: data.dates,
            datasets: [{
              data: data.counts,
              borderColor: data.color,
              backgroundColor: data.color + '20',
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                mode: 'index',
                intersect: false
              }
            },
            scales: {
              x: {
                grid: {
                  display: false
                }
              },
              y: {
                beginAtZero: true,
                grid: {
                  color: '#f0f0f0'
                }
              }
            }
          }
        });
      } catch (error) {
        console.error('Error updating chart:', error);
      } finally {
        chartContainer.removeChild(loadingDiv);
      }
    }

    // Export function
    async function exportData(format, event) {
      event.preventDefault();
      const button = event.target.closest('button');
      const originalText = button.innerHTML;
      
      try {
        // Show loading state
        button.disabled = true;
        button.innerHTML = `<i class="bi bi-arrow-repeat spin"></i> Exporting...`;
        
        // Get current range from active button
        const activeRangeButton = document.querySelector('.time-range-button.active');
        const range = activeRangeButton ? activeRangeButton.dataset.range : 'week';
        
        // Create loading overlay
        const overlay = document.createElement('div');
        overlay.className = 'loading-overlay';
        overlay.innerHTML = '<div><i class="bi bi-arrow-repeat spin"></i><br>Preparing export...</div>';
        document.body.appendChild(overlay);
        
        // Build query parameters
        const params = new URLSearchParams({
          format,
          range,
          prefix: currentPrefix || 'all'
        });
        
        // Fetch export data
        const response = await fetch(`/admin/dashboard/export?${params.toString()}`);
        if (!response.ok) throw new Error('Export failed');
        
        // Get filename from response headers
        const contentDisposition = response.headers.get('content-disposition');
        const filenameMatch = contentDisposition && contentDisposition.match(/filename="(.+)"/);
        const filename = filenameMatch ? filenameMatch[1] : `dashboard_export.${format}`;
        
        // Download the file
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        
        // Show success message
        button.innerHTML = `<i class="bi bi-check-circle"></i> Exported!`;
        setTimeout(() => {
          button.disabled = false;
          button.innerHTML = originalText;
        }, 2000);
      } catch (error) {
        console.error('Export error:', error);
        button.innerHTML = `<i class="bi bi-x-circle"></i> Export Failed`;
        setTimeout(() => {
          button.disabled = false;
          button.innerHTML = originalText;
        }, 2000);
      } finally {
        // Remove loading overlay
        const overlay = document.querySelector('.loading-overlay');
        if (overlay) document.body.removeChild(overlay);
      }
    }
  </script>
</body>
</html>
