<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Admin Dashboard</title>
  <link rel="stylesheet" href="/css/app.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    .dashboard-container {
      padding: 20px;
    }
    .dashboard-title {
      margin-bottom: 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    .stat-card {
      background: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      cursor: pointer;
      transition: all 0.2s ease;
    }
    .stat-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }
    .stat-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      padding-left: 10px;
    }
    .stat-header h3 {
      margin: 0;
      font-size: 1.2rem;
      font-weight: 600;
    }
    .total-count {
      font-size: 0.9rem;
      color: #666;
      background: #f8f9fa;
      padding: 4px 8px;
      border-radius: 12px;
    }
    .chart-container {
      position: relative;
      height: 400px;
      width: 100%;
    }
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      animation: fadeIn 0.2s ease;
    }
    .modal-content {
      position: relative;
      background-color: #fff;
      margin: 5% auto;
      padding: 25px;
      width: 90%;
      max-width: 1000px;
      border-radius: 12px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
      animation: slideIn 0.3s ease;
    }
    .close {
      position: absolute;
      right: 20px;
      top: 15px;
      font-size: 24px;
      color: #666;
      cursor: pointer;
      transition: color 0.2s;
    }
    .close:hover {
      color: #333;
    }
    .time-range-buttons {
      display: flex;
      gap: 10px;
      margin: 20px 0;
      flex-wrap: wrap;
    }
    .time-range-button {
      padding: 8px 16px;
      border: none;
      border-radius: 20px;
      background-color: #f0f0f0;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 0.9rem;
    }
    .time-range-button:hover {
      background-color: #e0e0e0;
    }
    .time-range-button.active {
      background-color: #2196F3;
      color: white;
    }
    .stat-summary {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }
    .summary-item {
      background: #f8f9fa;
      padding: 15px;
      border-radius: 8px;
      text-align: center;
    }
    .summary-item h4 {
      margin: 0;
      font-size: 0.9rem;
      color: #666;
    }
    .summary-item p {
      margin: 5px 0 0;
      font-size: 1.5rem;
      font-weight: 600;
      color: #333;
    }
    .category-badge {
      display: inline-block;
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 0.85em;
      font-weight: 500;
      margin-right: 5px;
    }
    .category-security { background: #ffebee; color: #c62828; }
    .category-rfid { background: #e3f2fd; color: #1565c0; }
    .category-location { background: #e8f5e9; color: #2e7d32; }
    .category-user { background: #fff3e0; color: #ef6c00; }
    .category-anomaly { background: #fce4ec; color: #c2185b; }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    @keyframes slideIn {
      from { transform: translateY(-20px); opacity: 0; }
      to { transform: translateY(0); opacity: 1; }
    }
    .loading {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
    }
    .loading i {
      font-size: 2rem;
      color: #2196F3;
      animation: spin 1s linear infinite;
    }
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="dashboard-container">
    <div class="dashboard-title">
      <h2>System Activity Dashboard</h2>
      <div class="btn-group">
        <button class="btn btn-outline-secondary" onclick="exportData('csv')">
          <i class="bi bi-file-earmark-spreadsheet"></i> Export Data
        </button>
        <button class="btn btn-outline-secondary" onclick="window.location.href='/admin/audit-logs'">
          <i class="bi bi-list-ul"></i> View Audit Logs
        </button>
      </div>
    </div>
    
    <div class="stats-grid">
      <% timeSeriesData.forEach(function(series) { 
        let categoryClass = '';
        if (series.category.includes('Security')) categoryClass = 'category-security';
        else if (series.category.includes('RFID')) categoryClass = 'category-rfid';
        else if (series.category.includes('Location')) categoryClass = 'category-location';
        else if (series.category.includes('User')) categoryClass = 'category-user';
        else if (series.category.includes('Anomaly')) categoryClass = 'category-anomaly';
      %>
        <div class="stat-card" data-prefix="<%= series.prefix %>">
          <div class="stat-header" style="border-left: 4px solid <%= categoryColors[series.category] || '#C9CBCF' %>">
            <div>
              <span class="category-badge <%= categoryClass %>"><%= series.category %></span>
              <span class="total-count">
                <i class="bi bi-activity"></i> <%= series.counts.reduce((a, b) => a + b, 0) %> events
              </span>
            </div>
            <i class="bi bi-arrows-angle-expand text-muted"></i>
          </div>
          <div class="stat-body">
            <canvas id="chart-<%= series.prefix %>" 
                    data-dates="<%= encodeURIComponent(JSON.stringify(series.dates)) %>"
                    data-counts="<%= encodeURIComponent(JSON.stringify(series.counts)) %>"
                    data-category="<%= series.category %>"
                    data-color="<%= categoryColors[series.category] || '#C9CBCF' %>"></canvas>
          </div>
        </div>
      <% }); %>
    </div>
  </div>

  <!-- Modal -->
  <div id="detailModal" class="modal">
    <div class="modal-content">
      <span class="close"><i class="bi bi-x-lg"></i></span>
      <h2 id="modalTitle"></h2>
      
      <div class="stat-summary">
        <div class="summary-item">
          <h4>Total Events</h4>
          <p id="totalEvents">0</p>
        </div>
        <div class="summary-item">
          <h4>Average per Day</h4>
          <p id="avgEvents">0</p>
        </div>
        <div class="summary-item">
          <h4>Peak Count</h4>
          <p id="peakEvents">0</p>
        </div>
        <div class="summary-item">
          <h4>Current Trend</h4>
          <p id="trendIndicator">-</p>
        </div>
      </div>

      <div class="time-range-buttons">
        <button class="time-range-button" data-range="24h">
          <i class="bi bi-clock"></i> Last 24 hours
        </button>
        <button class="time-range-button active" data-range="week">
          <i class="bi bi-calendar-week"></i> Last week
        </button>
        <button class="time-range-button" data-range="month">
          <i class="bi bi-calendar-month"></i> Last month
        </button>
        <button class="time-range-button" data-range="year">
          <i class="bi bi-calendar4"></i> Last year
        </button>
      </div>

      <div class="chart-container">
        <canvas id="modalChart"></canvas>
        <div class="loading" style="display: none;">
          <i class="bi bi-arrow-repeat"></i>
          <p>Loading data...</p>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Initialize dashboard charts and store them in a map
    const dashboardCharts = new Map();
    
    document.querySelectorAll('canvas[id^="chart-"]').forEach(canvas => {
      const dates = JSON.parse(decodeURIComponent(canvas.dataset.dates));
      const counts = JSON.parse(decodeURIComponent(canvas.dataset.counts));
      const color = canvas.dataset.color;
      const chart = initChart(canvas, dates, counts, color);
      dashboardCharts.set(canvas.id, chart);
    });

    function initChart(canvas, dates, counts, color) {
      const ctx = canvas.getContext('2d');
      const maxCount = Math.max(...counts);
      const suggestedMax = maxCount <= 1 ? 5 : Math.ceil(maxCount * 1.2);
      
      return new Chart(ctx, {
        type: 'line',
        data: {
          labels: dates.map(date => new Date(date).toLocaleDateString()),
          datasets: [{
            data: counts,
            borderColor: color,
            backgroundColor: color + '20',
            fill: true,
            tension: 0.4,
            pointRadius: 0,
            borderWidth: 1.5,
            cubicInterpolationMode: 'monotone'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          animation: {
            duration: 750,
            easing: 'easeInOutQuart'
          },
          plugins: {
            legend: { display: false },
            tooltip: {
              mode: 'index',
              intersect: false,
              callbacks: {
                title: (items) => {
                  if (!items.length) return '';
                  const date = new Date(dates[items[0].dataIndex]);
                  return date.toLocaleDateString('en-US', { 
                    weekday: 'short',
                    month: 'short', 
                    day: 'numeric'
                  });
                },
                label: (item) => {
                  return `Events: ${item.raw}`;
                }
              }
            }
          },
          scales: {
            x: {
              display: true,
              grid: {
                display: false
              },
              ticks: {
                maxRotation: 0,
                autoSkip: true,
                maxTicksLimit: 4,
                color: '#666'
              }
            },
            y: {
              display: true,
              beginAtZero: true,
              suggestedMax: suggestedMax,
              grid: {
                color: '#f0f0f0'
              },
              ticks: {
                stepSize: suggestedMax <= 5 ? 1 : undefined,
                precision: 0,
                color: '#666'
              }
            }
          }
        }
      });
    }

    // Modal handling
    const modal = document.getElementById('detailModal');
    const closeBtn = document.querySelector('.close');
    let modalChart = null;
    let currentPrefix = null;

    // Add click handlers to stat cards
    document.querySelectorAll('.stat-card').forEach(card => {
      card.addEventListener('click', async function(e) {
        e.preventDefault();
        const prefix = this.dataset.prefix;
        const category = this.querySelector('.category-badge').textContent;
        const color = this.querySelector('canvas').dataset.color;
        
        currentPrefix = prefix;
        document.getElementById('modalTitle').textContent = category;
        modal.style.display = 'block';
        
        // Initialize modal chart with week view by default
        await updateModalChart('week', prefix, category, color);
      });
    });

    closeBtn.addEventListener('click', function() {
      modal.style.display = 'none';
      if (modalChart) {
        modalChart.destroy();
        modalChart = null;
      }
    });

    window.addEventListener('click', function(event) {
      if (event.target === modal) {
        modal.style.display = 'none';
        if (modalChart) {
          modalChart.destroy();
          modalChart = null;
        }
      }
    });

    // Time range buttons
    document.querySelectorAll('.time-range-button').forEach(button => {
      button.addEventListener('click', async function() {
        if (!currentPrefix) return;
        
        const range = this.dataset.range;
        const activeCard = document.querySelector(`.stat-card[data-prefix="${currentPrefix}"]`);
        const category = activeCard.querySelector('.category-badge').textContent;
        const color = activeCard.querySelector('canvas').dataset.color;

        // Update active button
        document.querySelectorAll('.time-range-button').forEach(btn => {
          btn.classList.remove('active');
        });
        this.classList.add('active');

        // Update chart
        await updateModalChart(range, currentPrefix, category, color);
      });
    });

    async function updateModalChart(range, prefix, category, color) {
      try {
        // Show loading state
        document.querySelector('.loading').style.display = 'block';
        if (modalChart) {
          modalChart.destroy();
        }

        const response = await fetch(`/admin/dashboard/data?range=${range}`);
        const data = await response.json();
        
        // Hide loading state
        document.querySelector('.loading').style.display = 'none';
        
        if (!data.success) {
          console.error('Error:', data.error);
          document.getElementById('modalTitle').textContent = `${category} - Error loading data`;
          return;
        }
        
        const seriesData = data.data.find(s => s.prefix === prefix);
        if (!seriesData) {
          console.error('Category data not found');
          document.getElementById('modalTitle').textContent = `${category} - No data available`;
          return;
        }

        // Update summary statistics
        const total = seriesData.counts.reduce((a, b) => a + b, 0);
        const avg = (total / seriesData.counts.length).toFixed(1);
        const peak = Math.max(...seriesData.counts);
        const trend = calculateTrend(seriesData.counts);
        
        document.getElementById('totalEvents').textContent = total;
        document.getElementById('avgEvents').textContent = avg;
        document.getElementById('peakEvents').textContent = peak;
        document.getElementById('trendIndicator').innerHTML = getTrendIcon(trend);

        document.getElementById('modalTitle').textContent = category;

        const ctx = document.getElementById('modalChart').getContext('2d');
        modalChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: seriesData.dates.map(date => new Date(date).toLocaleDateString()),
            datasets: [{
              data: seriesData.counts,
              borderColor: color,
              backgroundColor: color + '20',
              fill: true,
              tension: 0.4,
              pointRadius: 2,
              borderWidth: 2
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: {
              duration: 750,
              easing: 'easeInOutQuart'
            },
            plugins: {
              legend: { display: false },
              tooltip: {
                mode: 'index',
                intersect: false,
                callbacks: {
                  title: (items) => {
                    if (!items.length) return '';
                    const date = new Date(seriesData.dates[items[0].dataIndex]);
                    return date.toLocaleDateString('en-US', {
                      weekday: 'short',
                      month: 'short',
                      day: 'numeric'
                    });
                  },
                  label: (item) => {
                    return `Events: ${item.raw}`;
                  }
                }
              }
            },
            scales: {
              x: {
                display: true,
                grid: {
                  display: false
                },
                ticks: {
                  maxRotation: 0,
                  autoSkip: true,
                  maxTicksLimit: 8,
                  color: '#666',
                  font: {
                    size: 12
                  }
                }
              },
              y: {
                display: true,
                beginAtZero: true,
                grid: {
                  color: '#f0f0f0'
                },
                ticks: {
                  precision: 0,
                  color: '#666',
                  font: {
                    size: 12
                  }
                }
              }
            }
          }
        });
        modalChart.prefix = prefix;
      } catch (error) {
        console.error('Error updating modal chart:', error);
        document.querySelector('.loading').style.display = 'none';
      }
    }

    function calculateTrend(counts) {
      if (counts.length < 2) return 0;
      const recentAvg = counts.slice(-3).reduce((a, b) => a + b, 0) / 3;
      const oldAvg = counts.slice(0, 3).reduce((a, b) => a + b, 0) / 3;
      return recentAvg - oldAvg;
    }

    function getTrendIcon(trend) {
      if (trend > 0) {
        return '<i class="bi bi-arrow-up-circle-fill text-success"></i> Increasing';
      } else if (trend < 0) {
        return '<i class="bi bi-arrow-down-circle-fill text-danger"></i> Decreasing';
      }
      return '<i class="bi bi-dash-circle-fill text-warning"></i> Stable';
    }

    function exportData(format) {
      const currentUrl = new URL(window.location.href);
      currentUrl.searchParams.set('export', format);
      window.location.href = currentUrl.toString();
    }
  </script>
</body>
</html>
