<style>
  .dashboard-container {
    padding: 24px 28px 32px;
    background: var(--bs-tertiary-bg, #f8f9fc);
    min-height: 100%;
    margin: 0;
    max-width: none;
    height: auto;
  }
  .dashboard-hero {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    align-items: center;
    gap: 24px;
    padding: 24px 32px;
    margin-bottom: 28px;
    border-radius: 18px;
    background: var(--primary-color);
    color: #ffffff;
    position: relative;
    overflow: hidden;
  }
  .dashboard-hero::after {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at top right, rgba(255,255,255,0.15), transparent 55%), radial-gradient(circle at bottom left, rgba(255,255,255,0.1), transparent 45%);
    pointer-events: none;
  }
  .dashboard-hero-content {
    position: relative;
    z-index: 1;
  }
  .dashboard-hero h1 {
    font-size: 1.875rem;
    font-weight: 700;
    margin: 0 0 8px;
    line-height: 1;
  }
  .dashboard-hero-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    font-size: 0.9rem;
    opacity: 0.9;
  }
  .dashboard-hero-meta span {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 6px 12px;
    border-radius: 999px;
    background: rgba(255,255,255,0.15);
    backdrop-filter: blur(4px);
  }
  .quick-actions {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
    justify-content: flex-end;
    align-items: center;
    position: relative;
    z-index: 1;
  }
  .quick-action-btn {
    padding: 10px 18px;
    border-radius: 10px;
    font-size: 0.9rem;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    font-weight: 600;
    box-shadow: 0 10px 30px rgba(15,23,42,0.12);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
  }
  .quick-action-btn.btn-outline-primary {
    border-color: rgba(255,255,255,0.6);
    color: #ffffff;
    background: rgba(255,255,255,0.08);
  }
  .quick-action-btn.btn-outline-primary:hover {
    background: rgba(255,255,255,0.18);
    border-color: rgba(255,255,255,0.8);
  }
  .quick-action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 14px 35px rgba(15,23,42,0.18);
  }
  .dashboard-filters {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: flex-end;
    gap: 18px;
    margin-bottom: 28px;
    padding: 20px 24px;
    border-radius: 14px;
    border: 1px solid rgba(15,23,42,0.08);
    background: var(--bs-body-bg);
    box-shadow: 0 12px 32px rgba(15,23,42,0.06);
  }
  .dashboard-filters .filter-group {
    display: flex;
    flex-wrap: wrap;
    gap: 18px;
    flex: 1 1 auto;
  }
  .filter-item {
    min-width: 220px;
  }
  .filter-label {
    display: block;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.08em;
    font-weight: 600;
    margin-bottom: 6px;
    color: var(--bs-secondary-color);
  }
  .input-with-icon {
    position: relative;
  }
  .input-with-icon i {
    position: absolute;
    top: 50%;
    left: 18px;
    transform: translateY(-50%);
    color: var(--bs-secondary-color);
    font-size: 0.85rem;
    pointer-events: none;
  }
  .input-with-icon select {
    padding-left: 56px !important;
    line-height: 1.3;
  }
  .dashboard-filters .form-select {
    border-radius: 10px;
    padding: 10px 14px;
    border-color: rgba(15,23,42,0.12);
    box-shadow: none;
  }
  .dashboard-filters .form-select:focus {
    border-color: var(--bs-primary);
    box-shadow: 0 0 0 0.15rem rgba(13,110,253,0.15);
  }
  .refresh-dashboard-btn {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 10px 16px;
    border-radius: 10px;
    border: 1px solid rgba(15,23,42,0.14);
    background: var(--bs-secondary-bg);
    color: var(--bs-body-color);
    font-weight: 600;
    transition: all 0.2s ease;
  }
  .refresh-dashboard-btn:hover {
    background: var(--bs-primary);
    color: #ffffff;
    border-color: var(--bs-primary);
    transform: translateY(-1px);
    box-shadow: 0 12px 24px rgba(13,110,253,0.18);
  }
  .dashboard-container .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
    gap: 22px;
    margin-bottom: 32px;
  }
  .dashboard-container .stat-card {
    position: relative;
    overflow: hidden;
    background: var(--bs-body-bg);
    border-radius: 18px;
    padding: 24px 26px;
    border: 1px solid rgba(15,23,42,0.08);
    box-shadow: 0 18px 45px rgba(15,23,42,0.08);
    display: flex;
    flex-direction: column;
    gap: 6px;
  }
  .dashboard-container .stat-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(180deg, rgba(255,255,255,0.08), rgba(255,255,255,0));
    opacity: 0.8;
    pointer-events: none;
  }
  .dashboard-container .stat-card.entries .stat-icon-pill {
    background: rgba(40,167,69,0.18);
    color: #1f8a47;
  }
  .dashboard-container .stat-card.exits .stat-icon-pill {
    background: rgba(220,53,69,0.18);
    color: #b02a37;
  }
  .dashboard-container .stat-card.anomalies .stat-icon-pill {
    background: rgba(255,193,7,0.2);
    color: #c28100;
  }
  .dashboard-container .stat-card.users .stat-icon-pill {
    background: rgba(111,66,193,0.2);
    color: #5b2eb3;
  }
  .dashboard-container .stat-card.entries .stat-badge {
    background: rgba(40,167,69,0.12);
    color: #1f8a47;
  }
  .dashboard-container .stat-card.exits .stat-badge {
    background: rgba(220,53,69,0.12);
    color: #b02a37;
  }
  .dashboard-container .stat-card.anomalies .stat-badge {
    background: rgba(255,193,7,0.18);
    color: #c28100;
  }
  .dashboard-container .stat-card.users .stat-badge {
    background: rgba(111,66,193,0.18);
    color: #5b2eb3;
  }
  .dashboard-container .stat-header {
    position: relative;
    z-index: 1;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
  }
  .dashboard-container .stat-icon-pill {
    width: 48px;
    height: 48px;
    border-radius: 14px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 1.4rem;
    box-shadow: inset 0 0 0 1px rgba(255,255,255,0.35);
  }
  .dashboard-container .stat-badge {
    font-size: 0.75rem;
    letter-spacing: 0.08em;
    text-transform: uppercase;
    font-weight: 700;
    padding: 4px 10px;
    border-radius: 999px;
    background: var(--bs-secondary-bg);
    color: var(--bs-secondary-color);
  }
  .dashboard-container .stat-number {
    position: relative;
    z-index: 1;
    font-size: 2.35rem;
    font-weight: 700;
    color: var(--bs-body-color);
    margin: 0;
    line-height: 1.1;
  }
  .dashboard-container .stat-label {
    position: relative;
    z-index: 1;
    color: var(--bs-secondary-color);
    font-size: 0.95rem;
    margin-bottom: 14px;
  }
  .dashboard-container .stat-trend {
    position: relative;
    z-index: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 0.85rem;
  }
  .dashboard-container .trend-chip {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 5px 12px;
    border-radius: 999px;
    font-weight: 600;
    background: rgba(108,117,125,0.12);
    color: #495057;
  }
  .dashboard-container .trend-label {
    color: var(--bs-secondary-color);
    font-size: 0.8rem;
  }
  .dashboard-container .trend-up {
    color: #1f8a47;
    background: rgba(40,167,69,0.18);
  }
  .dashboard-container .trend-down {
    color: #b02a37;
    background: rgba(220,53,69,0.18);
  }
  .dashboard-container .trend-neutral {
    color: #566074;
    background: rgba(108,117,125,0.15);
  }
  .dashboard-container .trend-chip i {
    font-size: 0.85rem;
  }
  .text-purple {
    color: #5b2eb3 !important;
  }
  
  .charts-section {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 22px;
    margin-bottom: 32px;
  }
  
  .chart-container {
    background: var(--bs-body-bg);
    padding: 24px;
    border-radius: 18px;
    box-shadow: 0 18px 45px rgba(15,23,42,0.08);
    border: 1px solid rgba(15,23,42,0.08);
    display: flex;
    flex-direction: column;
    height: 400px;
    min-height: 400px;
    position: relative;
    overflow: hidden;
  }
  .chart-container::after {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at top left, rgba(82,109,255,0.08), transparent 55%);
    pointer-events: none;
  }
  
  .chart-canvas-wrapper {
    position: relative;
    height: 320px;
    width: 100%;
    flex-grow: 1;
  }
  
  .chart-canvas-container {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
  }
  
  .chart-canvas-container canvas {
    display: block;
    width: 100% !important;
    height: 100% !important;
    max-width: 100%;
    max-height: 100%;
  }
  
  .chart-header {
    position: relative;
    z-index: 1;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
  }
  
  .chart-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  .chart-title span {
    font-size: 0.8rem;
    font-weight: 400;
    color: var(--bs-secondary-color);
  }
  
  .chart-controls {
    display: inline-flex;
    gap: 10px;
    padding: 6px;
    border-radius: 999px;
    background: var(--bs-secondary-bg);
  }
  
  .chart-control-btn {
    padding: 6px 14px;
    border: none;
    background: transparent;
    color: var(--bs-secondary-color);
    border-radius: 999px;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s ease;
    font-weight: 600;
  }
  
  .chart-control-btn.active {
    background: var(--bs-primary);
    color: #ffffff;
    box-shadow: 0 8px 18px rgba(13,110,253,0.25);
  }
  
  .chart-control-btn:hover:not(.active) {
    background: rgba(13,110,253,0.12);
    color: var(--bs-primary);
  }
  .chart-control-btn:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
  
  .activities-section {
    display: grid;
    grid-template-columns: 1.25fr 1fr;
    gap: 22px;
  }
  
  .recent-activities,
  .system-health {
    background: var(--bs-body-bg);
    padding: 24px;
    border-radius: 18px;
    border: 1px solid rgba(15,23,42,0.08);
    box-shadow: 0 18px 45px rgba(15,23,42,0.08);
  }

  .recent-activities h5,
  .system-health h5 {
    font-weight: 700;
    margin-bottom: 20px;
  }

  #activitiesList {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .activity-item {
    display: grid;
    grid-template-columns: auto 1fr auto;
    gap: 16px;
    padding: 16px 18px;
    border-radius: 14px;
    background: var(--bs-secondary-bg);
    border: 1px solid rgba(15,23,42,0.06);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    align-items: center;
  }
  .activity-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 24px rgba(15,23,42,0.12);
  }

  .activity-icon {
    width: 44px;
    height: 44px;
    border-radius: 12px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
    background: rgba(13,110,253,0.12);
    color: var(--bs-primary);
  }

  .activity-content {
    display: flex;
    flex-direction: column;
    gap: 6px;
  }

  .activity-title {
    font-weight: 600;
    margin: 0;
    color: var(--bs-body-color);
    text-transform: uppercase;
    font-size: 0.85rem;
    letter-spacing: 0.04em;
  }

  .activity-subtitle {
    font-size: 0.9rem;
    color: var(--bs-body-color);
    font-weight: 500;
  }

  .activity-meta {
    display: inline-flex;
    flex-wrap: wrap;
    gap: 8px;
    align-items: center;
    font-size: 0.75rem;
    color: var(--bs-secondary-color);
  }
  .activity-meta span {
    display: inline-flex;
    align-items: center;
    gap: 6px;
  }

  .activity-meta .dot {
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background: currentColor;
    opacity: 0.6;
  }

  .activity-status {
    align-self: center;
    padding: 6px 12px;
    border-radius: 999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.06em;
    box-shadow: 0 6px 16px rgba(15,23,42,0.12);
    display: inline-flex;
    align-items: center;
    gap: 6px;
    justify-self: end;
  }
  .activity-status i {
    font-size: 0.55rem;
  }
  
  .status-success {
    background: rgba(40, 167, 69, 0.12);
    color: #1f8a47;
  }
  
  .status-warning {
    background: rgba(255, 193, 7, 0.18);
    color: #c28100;
  }
  
  .status-danger {
    background: rgba(220, 53, 69, 0.18);
    color: #b02a37;
  }
  
  .status-info {
    background: rgba(13, 110, 253, 0.12);
    color: var(--bs-primary);
  }
  
  .health-item {
    display: grid;
    grid-template-columns: 1fr auto;
    align-items: center;
    gap: 12px;
    padding: 14px 16px;
    border-radius: 12px;
    border: 1px dashed rgba(15,23,42,0.12);
    background: rgba(13,110,253,0.04);
  }
  
  .health-item + .health-item {
    margin-top: 12px;
  }
  
  .health-label {
    font-weight: 600;
    font-size: 0.95rem;
  }
  
  .health-status {
    display: inline-flex;
    align-items: center;
    gap: 10px;
    font-weight: 600;
    font-size: 0.85rem;
  }
  
  .health-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
    box-shadow: 0 0 0 4px rgba(15,23,42,0.08);
  }
  
  .indicator-good { background: #1f8a47; }
  .indicator-warning { background: #ffc107; }
  .indicator-critical { background: #dc3545; }
  
  @media (max-width: 992px) {
    .dashboard-hero {
      grid-template-columns: 1fr;
      text-align: left;
    }
    .quick-actions {
      justify-content: flex-start;
    }
    .activities-section {
      grid-template-columns: 1fr;
    }
  }
  @media (max-width: 768px) {
    .dashboard-container {
      padding: 18px;
    }
    .dashboard-hero {
      padding: 24px;
    }
    .dashboard-filters {
      padding: 18px;
    }
    .dashboard-filters .filter-group {
      width: 100%;
    }
    .filter-item {
      flex: 1 1 100%;
      min-width: unset;
    }
    .charts-section {
      grid-template-columns: 1fr;
    }
    .refresh-dashboard-btn {
      width: 100%;
      justify-content: center;
    }
    .activity-item {
      grid-template-columns: 1fr;
    }
    .activity-status {
      justify-content: flex-start;
      justify-self: flex-start;
      grid-column: 1 / -1;
    }
    .activity-icon {
      justify-self: flex-start;
    }
  }
</style>

<div class="dashboard-container">
    <div class="dashboard-hero">
      <div class="dashboard-hero-content">
        <h1>Dashboard</h1>
        <div class="dashboard-hero-meta">
          <span><i class="fas fa-user-shield"></i> Welcome back, <%= admin.first_name %></span>
          <span><i class="fas fa-clock"></i> <span id="dashboardLastUpdated"><%= new Date().toLocaleString() %></span></span>
        </div>
      </div>
      <div class="quick-actions">
        <a href="/admin/users/create" class="quick-action-btn btn btn-light btn-sm" data-modal="true">
          <i class="fas fa-user-plus"></i> Add User
        </a>
        <a href="/admin/classes/create" class="quick-action-btn btn btn-success btn-sm" data-modal="true">
          <i class="fas fa-plus"></i> Add Class
        </a>
        <a href="/admin/rfid-cards/create" class="quick-action-btn btn btn-info btn-sm" data-modal="true">
          <i class="fas fa-credit-card"></i> Add RFID
        </a>
        <a href="/admin/dashboard/export" class="quick-action-btn btn btn-outline-primary btn-sm">
          <i class="fas fa-download"></i> Export
        </a>
      </div>
    </div>

    <!-- Department Filter -->
    <form method="GET" class="dashboard-filters">
      <div class="filter-group">
        <div class="filter-item">
          <label for="department" class="filter-label">Filter by Department</label>
          <div class="input-with-icon">
            <i class="fas fa-building" aria-hidden="true"></i>
            <select name="department" id="department" class="form-select" onchange="this.form.submit()">
              <option value="">All Departments</option>
              <% if (typeof departments !== 'undefined') { %>
                <% departments.forEach(function(dept) { %>
                  <option value="<%= dept.code %>" <%= selectedDepartment === dept.code ? 'selected' : '' %>><%= dept.name %></option>
                <% }); %>
              <% } %>
            </select>
          </div>
        </div>
        <div class="filter-item">
          <label for="dateRange" class="filter-label">Time Period</label>
          <div class="input-with-icon">
            <i class="fas fa-calendar-alt" aria-hidden="true"></i>
            <select name="dateRange" id="dateRange" class="form-select" onchange="this.form.submit()">
              <option value="today" <%= selectedDateRange === 'today' ? 'selected' : '' %>>Today</option>
              <option value="week" <%= selectedDateRange === 'week' ? 'selected' : '' %>>This Week</option>
              <option value="month" <%= selectedDateRange === 'month' ? 'selected' : '' %>>This Month</option>
            </select>
          </div>
        </div>
      </div>
      <button type="button" class="refresh-dashboard-btn" id="refreshDashboard">
        <i class="fas fa-sync-alt"></i>
        <span>Refresh insights</span>
      </button>
    </form>

    <!-- Enhanced Statistics -->
    <div class="stats-grid">
      <div class="stat-card entries">
        <div class="stat-header">
          <div class="stat-icon-pill">
            <i class="fas fa-sign-in-alt"></i>
          </div>
          <span class="stat-badge">entries</span>
        </div>
        <div class="stat-number" id="entriesCount"><%= stats.totalEntries || 0 %></div>
        <div class="stat-label">Total Entries</div>
        <div class="stat-trend">
          <span class="trend-chip <%= getTrendClass(stats.trends ? stats.trends.entriesTrend : 0) %>">
            <i class="fas <%= getTrendIcon(stats.trends ? stats.trends.entriesTrend : 0) %>"></i>
            <span><%= formatTrend(stats.trends ? stats.trends.entriesTrend : 0) %>%</span>
          </span>
          <span class="trend-label">vs last period</span>
        </div>
      </div>
      <div class="stat-card anomalies">
        <div class="stat-header">
          <div class="stat-icon-pill">
            <i class="fas fa-exclamation-triangle"></i>
          </div>
          <span class="stat-badge">alerts</span>
        </div>
        <div class="stat-number" id="anomaliesCount"><%= stats.totalAnomalies || 0 %></div>
        <div class="stat-label">Security Anomalies</div>
        <div class="stat-trend">
          <span class="trend-chip <%= getTrendClass(stats.trends ? stats.trends.anomaliesTrend : 0, true) %>">
            <i class="fas <%= getTrendIcon(stats.trends ? stats.trends.anomaliesTrend : 0, true) %>"></i>
            <span><%= formatTrend(stats.trends ? stats.trends.anomaliesTrend : 0) %>%</span>
          </span>
          <span class="trend-label">vs last period</span>
        </div>
      </div>
      <div class="stat-card users">
        <div class="stat-header">
          <div class="stat-icon-pill">
            <i class="fas fa-users"></i>
          </div>
          <span class="stat-badge">active</span>
        </div>
        <div class="stat-number" id="usersCount"><%= stats.activeUsers || 0 %></div>
        <div class="stat-label">Active Users</div>
        <div class="stat-trend">
          <span class="trend-chip <%= getTrendClass(stats.trends ? stats.trends.usersTrend : 0) %>">
            <i class="fas <%= getTrendIcon(stats.trends ? stats.trends.usersTrend : 0) %>"></i>
            <span><%= formatTrend(stats.trends ? stats.trends.usersTrend : 0) %>%</span>
          </span>
          <span class="trend-label">vs last period</span>
        </div>
      </div>
    </div>

    <!-- Charts Section -->
    <div class="charts-section">
      <div class="chart-container">
        <div class="chart-header">
          <h5 class="chart-title">Activity Trends<span>Entries, exits, and anomalies by selected range</span></h5>
          <div class="chart-controls">
            <button class="chart-control-btn active" data-range="24h">24H</button>
            <button class="chart-control-btn" data-range="week">Week</button>
            <button class="chart-control-btn" data-range="month">Month</button>
            <button class="chart-control-btn" data-range="year">Year</button>
          </div>
        </div>
        <div class="chart-canvas-wrapper">
          <div class="chart-canvas-container">
            <canvas id="activityChart"></canvas>
          </div>
        </div>
      </div>
      
      <div class="chart-container">
        <div class="chart-header">
          <h5 class="chart-title">Department Breakdown<span>Active users distributed by department</span></h5>
        </div>
        <div class="chart-canvas-wrapper">
          <div class="chart-canvas-container">
            <canvas id="departmentChart"></canvas>
          </div>
        </div>
      </div>
    </div>

    <!-- Activities and System Health -->
    <div class="activities-section">
      <div class="recent-activities">
        <h5>Recent Activities</h5>
        <div id="activitiesList">
          <% const filteredActivities = (recentActivities || [])
              .filter(function(activity) {
                return !(activity && activity.action_type && activity.action_type.startsWith('REQUEST_'));
              })
              .slice(0, 5);
          %>
          <% if (filteredActivities.length > 0) { %>
            <% filteredActivities.forEach(function(activity) { %>
              <div class="activity-item">
                <div class="activity-icon <%= getActivityStatusClass(activity.action_type) %>">
                  <i class="<%= getActivityIcon(activity.action_type) %>"></i>
                </div>
                <div class="activity-content">
                  <div class="activity-title"><%= formatActivityTitle(activity.action_type) %></div>
                  <% if (activity.User) { %>
                    <div class="activity-subtitle"><%= activity.User.first_name %> <%= activity.User.last_name %></div>
                  <% } %>
                  <div class="activity-meta">
                    <span><i class="far fa-clock"></i> <%= new Date(activity.timestamp).toLocaleString() %></span>
                  </div>
                </div>
                <div class="activity-status <%= getActivityStatusClass(activity.action_type) %>">
                  <i class="fas fa-circle"></i>
                  <span><%= getActivityStatusText(activity.action_type) %></span>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <div class="text-muted text-center py-4">No recent activities found.</div>
          <% } %>
        </div>
      </div>

      <div class="system-health">
        <h5>System Health</h5>
        <div id="systemHealthList">
          <div class="health-item">
            <span class="health-label">Database</span>
            <div class="health-status" id="health-database">
              <span class="health-indicator indicator-good"></span>
              <span>Checking...</span>
            </div>
          </div>
          <div class="health-item">
            <span class="health-label">RFID Scanners</span>
            <div class="health-status" id="health-rfid">
              <span class="health-indicator indicator-good"></span>
              <span>Checking...</span>
            </div>
          </div>
          <div class="health-item">
            <span class="health-label">API Response</span>
            <div class="health-status" id="health-api">
              <span class="health-indicator indicator-good"></span>
              <span>Checking...</span>
            </div>
          </div>
          <div class="health-item">
            <span class="health-label">Storage</span>
            <div class="health-status" id="health-storage">
              <span class="health-indicator indicator-good"></span>
              <span>Checking...</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

<!-- Chart.js Scripts -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>

<script>
// Dashboard JavaScript functionality
class Dashboard {
  constructor() {
    this.activityChart = null;
    this.departmentChart = null;
    this.socket = null;
    this.init();
  }

  init() {
    this.initCharts();
    this.initWebSocket();
    this.bindEvents();
    this.loadInitialData();
  }

  initCharts() {
    console.log('Initializing charts...');
    
    // Activity Trends Chart
    const activityCanvas = document.getElementById('activityChart');
    if (!activityCanvas) {
      console.error('Activity chart canvas not found');
      return;
    }
    
    const activityWrapper = activityCanvas.closest('.chart-canvas-wrapper');
    console.log('Activity wrapper dimensions:', {
      width: activityWrapper?.offsetWidth,
      height: activityWrapper?.offsetHeight
    });
    
    const activityCtx = activityCanvas.getContext('2d');
    this.activityChart = new Chart(activityCtx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [
          {
            label: 'Entries',
            data: [],
            borderColor: '#28a745',
            backgroundColor: 'rgba(40, 167, 69, 0.1)',
            fill: true,
            tension: 0.4,
            pointRadius: 4,
            pointHoverRadius: 6
          },
          {
            label: 'Exits',
            data: [],
            borderColor: '#dc3545',
            backgroundColor: 'rgba(220, 53, 69, 0.1)',
            fill: true,
            tension: 0.4,
            pointRadius: 4,
            pointHoverRadius: 6
          },
          {
            label: 'Anomalies',
            data: [],
            borderColor: '#ffc107',
            backgroundColor: 'rgba(255, 193, 7, 0.1)',
            fill: true,
            tension: 0.4,
            pointRadius: 4,
            pointHoverRadius: 6
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        animation: {
          duration: 0 // Disable animations to prevent infinite loops
        },
        scales: {
          x: {
            type: 'category',
            grid: {
              display: false
            },
            ticks: {
              maxTicksLimit: 12,
              maxRotation: 45
            }
          },
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(0,0,0,0.1)'
            },
            ticks: {
              precision: 0,
              stepSize: 1
            },
            min: 0,
            suggestedMax: 10 // Start with a reasonable max
          }
        },
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              padding: 20
            }
          },
          tooltip: {
            mode: 'index',
            intersect: false
          }
        }
      }
    });

    // Department Breakdown Chart
    const departmentCanvas = document.getElementById('departmentChart');
    if (!departmentCanvas) {
      console.error('Department chart canvas not found');
      return;
    }
    const departmentCtx = departmentCanvas.getContext('2d');
    this.departmentChart = new Chart(departmentCtx, {
      type: 'doughnut',
      data: {
        labels: [],
        datasets: [{
          data: [],
          backgroundColor: [
            '#007bff',
            '#28a745',
            '#dc3545',
            '#ffc107',
            '#6f42c1',
            '#20c997',
            '#fd7e14',
            '#17a2b8',
            '#6610f2'
          ],
          borderWidth: 2,
          borderColor: '#fff',
          hoverBorderWidth: 3
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        animation: {
          duration: 0 // Disable animations to prevent issues
        },
        plugins: {
          legend: {
            position: 'bottom',
            labels: {
              padding: 15,
              usePointStyle: true
            }
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || '';
                const value = context.parsed || 0;
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : 0;
                return `${label}: ${value} users (${percentage}%)`;
              }
            }
          }
        },
        cutout: '60%'
      }
    });
  }

  initWebSocket() {
    // Use the global socket connection from layout
    if (typeof window.socket !== 'undefined') {
      this.socket = window.socket;
      
      // Add throttling to prevent excessive updates
      let lastUpdate = 0;
      const UPDATE_THROTTLE = 5000; // 5 seconds minimum between updates
      
      this.socket.on('dashboardUpdate', (data) => {
        const now = Date.now();
        if (now - lastUpdate < UPDATE_THROTTLE) {
          console.log('Dashboard update throttled');
          return;
        }
        lastUpdate = now;
        
        console.log('Dashboard update received:', data);
        this.updateStatistics(data.stats);
        this.updateActivities(data.activities);
      });

      this.socket.on('systemHealth', (data) => {
        console.log('System health update received:', data);
        this.updateSystemHealth(data);
      });
    } else {
      console.warn('Socket.IO not available for dashboard updates');
    }
  }

  bindEvents() {
    // Chart control buttons with debouncing
    let chartUpdateTimeout;
    document.querySelectorAll('.chart-control-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        // Prevent rapid clicking
        if (chartUpdateTimeout) {
          clearTimeout(chartUpdateTimeout);
        }
        
        // Disable all buttons temporarily
        document.querySelectorAll('.chart-control-btn').forEach(b => {
          b.classList.remove('active');
          b.disabled = true;
        });
        
        e.target.classList.add('active');
        
        chartUpdateTimeout = setTimeout(() => {
          this.loadChartData(e.target.dataset.range).finally(() => {
            // Re-enable buttons
            document.querySelectorAll('.chart-control-btn').forEach(b => {
              b.disabled = false;
            });
          });
        }, 300); // 300ms debounce
      });
    });

    // Refresh button
    document.getElementById('refreshDashboard').addEventListener('click', () => {
      this.refreshData();
    });
  }

  async loadInitialData() {
    await this.loadChartData('24h');
    await this.loadDepartmentData();
  }

  async loadChartData(range = '24h') {
    try {
      const response = await fetch(`/admin/dashboard/data?range=${range}`);
      const data = await response.json();
      
      if (data.success) {
        this.updateActivityChart(data.data, range);
      }
    } catch (error) {
      console.error('Error loading chart data:', error);
    }
  }

  async loadDepartmentData() {
    try {
      const response = await fetch('/admin/dashboard/departments');
      const result = await response.json();
      
      if (result.success && result.data && result.data.labels && result.data.datasets) {
        // Check if data has actually changed
        const currentLabels = JSON.stringify(this.departmentChart.data.labels);
        const newLabels = JSON.stringify(result.data.labels);
        const currentData = JSON.stringify(this.departmentChart.data.datasets[0].data);
        const newData = JSON.stringify(result.data.datasets.users);
        
        if (currentLabels === newLabels && currentData === newData) {
          console.log('Department chart data unchanged, skipping update');
          return;
        }
        
        this.departmentChart.data.labels = result.data.labels;
        this.departmentChart.data.datasets[0].data = result.data.datasets.users;
        this.departmentChart.update('none'); // Update without animation
      } else {
        console.warn('No department data available or invalid format:', result);
        // Only set fallback data if chart is empty
        if (this.departmentChart.data.labels.length === 0) {
          this.departmentChart.data.labels = ['No Data'];
          this.departmentChart.data.datasets[0].data = [1];
          this.departmentChart.update('none');
        }
      }
    } catch (error) {
      console.error('Error loading department data:', error);
      // Only set fallback data if chart is empty
      if (this.departmentChart.data.labels.length === 0) {
        this.departmentChart.data.labels = ['Error Loading Data'];
        this.departmentChart.data.datasets[0].data = [1];
        this.departmentChart.update('none');
      }
    }
  }

  updateActivityChart(data, range) {
    if (!data || !data.labels || !this.activityChart) {
      console.warn('No chart data available or chart not initialized');
      return;
    }
    
    // Prevent unnecessary updates if data hasn't changed
    const currentLabels = JSON.stringify(this.activityChart.data.labels);
    const newLabels = JSON.stringify(data.labels);
    const currentEntries = JSON.stringify(this.activityChart.data.datasets[0].data);
    const newEntries = JSON.stringify(data.entries || []);
    
    if (currentLabels === newLabels && currentEntries === newEntries) {
      console.log('Chart data unchanged, skipping update');
      return;
    }
    
    // Update data
    this.activityChart.data.labels = data.labels;
    this.activityChart.data.datasets[0].data = data.entries || [];
    this.activityChart.data.datasets[1].data = data.exits || [];
    this.activityChart.data.datasets[2].data = data.anomalies || [];
    
    // Calculate appropriate Y-axis max based on data
    const allValues = [
      ...(data.entries || []),
      ...(data.exits || []),
      ...(data.anomalies || [])
    ];
    const maxValue = Math.max(...allValues, 0);
    const suggestedMax = Math.max(10, Math.ceil(maxValue * 1.2)); // 20% padding
    
    // Update Y-axis scale only if significantly different
    const currentMax = this.activityChart.options.scales.y.suggestedMax;
    if (Math.abs(suggestedMax - currentMax) > currentMax * 0.3) {
      this.activityChart.options.scales.y.suggestedMax = suggestedMax;
    }
    
    // Update chart without animation
    this.activityChart.update('none');
  }

  updateStatistics(stats) {
    if (stats) {
      document.getElementById('entriesCount').textContent = stats.totalEntries || 0;
      document.getElementById('anomaliesCount').textContent = stats.totalAnomalies || 0;
      document.getElementById('usersCount').textContent = stats.activeUsers || 0;

      const lastUpdated = document.getElementById('dashboardLastUpdated');
      if (lastUpdated) {
        lastUpdated.textContent = new Date().toLocaleString();
      }
    }
  }

  updateActivities(activities) {
    const activitiesList = document.getElementById('activitiesList');
    if (!activitiesList) return;

    const visibleActivities = (activities || [])
      .filter(activity => {
        return !(activity && activity.action_type && activity.action_type.startsWith('REQUEST_'));
      })
      .slice(0, 5);

    if (visibleActivities.length === 0) {
      activitiesList.innerHTML = '<div class="text-muted text-center py-4">No recent activities found.</div>';
      return;
    }

    activitiesList.innerHTML = visibleActivities.map(activity => {
      const statusClass = this.getActivityStatusClass(activity.action_type);
      return `
        <div class="activity-item">
          <div class="activity-icon ${statusClass}">
            <i class="${this.getActivityIcon(activity.action_type)}"></i>
          </div>
          <div class="activity-content">
            <div class="activity-title">${this.formatActivityTitle(activity.action_type)}</div>
            ${activity.User ? `<div class="activity-subtitle">${activity.User.first_name} ${activity.User.last_name}</div>` : ''}
            <div class="activity-meta">
              <span><i class="far fa-clock"></i> ${new Date(activity.timestamp).toLocaleString()}</span>
            </div>
          </div>
          <div class="activity-status ${statusClass}">
            <i class="fas fa-circle"></i>
            <span>${this.getActivityStatusText(activity.action_type)}</span>
          </div>
        </div>
      `;
    }).join('');
  }

  updateSystemHealth(healthData) {
    console.log('System health update:', healthData);
    
    if (!healthData) return;
    
    // Update each health indicator
    const healthItems = {
      'database': healthData.database,
      'rfid': healthData.rfidScanners,
      'api': healthData.apiResponse,
      'storage': healthData.storage
    };
    
    Object.keys(healthItems).forEach(key => {
      const item = healthItems[key];
      if (item) {
        const statusElement = document.getElementById(`health-${key}`);
        if (statusElement) {
          const indicator = statusElement.querySelector('.health-indicator');
          const text = statusElement.querySelector('span:last-child');
          
          // Update indicator color
          indicator.className = `health-indicator indicator-${item.status}`;
          
          // Update status text
          text.textContent = item.message;
        }
      }
    });
  }

  getActivityStatusClass(actionType) {
    if (actionType.includes('SUCCESS') || actionType.includes('ENTRY') || actionType.includes('EXIT')) {
      return 'status-success';
    } else if (actionType.includes('ANOMALY') || actionType.includes('FAILED')) {
      return 'status-danger';
    } else if (actionType.includes('WARNING')) {
      return 'status-warning';
    }
    return 'status-info';
  }

  getActivityStatusText(actionType) {
    if (actionType.includes('SUCCESS')) return 'Success';
    if (actionType.includes('FAILED')) return 'Failed';
    if (actionType.includes('ANOMALY')) return 'Alert';
    if (actionType.includes('WARNING')) return 'Warning';
    return 'Info';
  }

  getActivityIcon(actionType = '') {
    const type = actionType.toUpperCase();
    if (type.includes('ANOMALY') || type.includes('FAILED')) return 'fas fa-exclamation-triangle';
    if (type.includes('LOGIN')) return 'fas fa-user-shield';
    if (type.includes('OTP')) return 'fas fa-shield-alt';
    if (type.includes('ENTRY')) return 'fas fa-door-open';
    if (type.includes('EXIT')) return 'fas fa-door-closed';
    if (type.includes('LOCATION')) return 'fas fa-map-marker-alt';
    return 'fas fa-info-circle';
  }

  formatActivityTitle(actionType = '') {
    return actionType
      ? actionType.split('_').map(part => {
          if (part.length <= 3) return part.toUpperCase();
          const lower = part.toLowerCase();
          return lower.charAt(0).toUpperCase() + lower.slice(1);
        }).join(' ')
      : '';
  }

  refreshData() {
    const refreshBtn = document.getElementById('refreshDashboard');
    const icon = refreshBtn.querySelector('i');
    
    // Prevent multiple refreshes
    if (refreshBtn.disabled) return;
    
    refreshBtn.disabled = true;
    icon.style.animation = 'spin 1s linear infinite';
    
    this.loadInitialData().then(() => {
      setTimeout(() => {
        icon.style.animation = '';
        refreshBtn.disabled = false;
      }, 2000); // 2 second cooldown
    }).catch(() => {
      setTimeout(() => {
        icon.style.animation = '';
        refreshBtn.disabled = false;
      }, 2000);
    });
  }
}

// Initialize dashboard when DOM is loaded (prevent multiple instances)
document.addEventListener('DOMContentLoaded', () => {
  if (!window.dashboardInstance) {
    // Add a small delay to ensure DOM elements are properly rendered
    setTimeout(() => {
      window.dashboardInstance = new Dashboard();
    }, 100);
  }
});

// CSS animation for refresh button
const style = document.createElement('style');
style.textContent = `
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
`;
document.head.appendChild(style);
</script>

<%
// Helper functions for activity status
function getActivityStatusClass(actionType) {
  if (actionType.includes('SUCCESS') || actionType.includes('ENTRY') || actionType.includes('EXIT')) {
    return 'status-success';
  } else if (actionType.includes('ANOMALY') || actionType.includes('FAILED')) {
    return 'status-danger';
  } else if (actionType.includes('WARNING')) {
    return 'status-warning';
  }
  return 'status-info';
}

function getActivityStatusText(actionType) {
  if (actionType.includes('SUCCESS')) return 'Success';
  if (actionType.includes('FAILED')) return 'Failed';
  if (actionType.includes('ANOMALY')) return 'Alert';
  if (actionType.includes('WARNING')) return 'Warning';
  return 'Info';
}

function getActivityIcon(actionType = '') {
  const type = actionType.toUpperCase();
  if (type.includes('ANOMALY') || type.includes('FAILED')) return 'fas fa-exclamation-triangle';
  if (type.includes('LOGIN')) return 'fas fa-user-shield';
  if (type.includes('OTP')) return 'fas fa-shield-alt';
  if (type.includes('ENTRY')) return 'fas fa-door-open';
  if (type.includes('EXIT')) return 'fas fa-door-closed';
  if (type.includes('LOCATION')) return 'fas fa-map-marker-alt';
  return 'fas fa-info-circle';
}

function formatActivityTitle(actionType = '') {
  if (!actionType) return '';
  return actionType.split('_').map(part => {
    if (part.length <= 3) return part.toUpperCase();
    const lower = part.toLowerCase();
    return lower.charAt(0).toUpperCase() + lower.slice(1);
  }).join(' ');
}

// Helper functions for trend display
function getTrendClass(value, inverse = false) {
  const numValue = parseFloat(value);
  if (isNaN(numValue) || numValue === 0) return 'trend-neutral';
  
  if (inverse) {
    // For anomalies, down is good (green), up is bad (red)
    return numValue > 0 ? 'trend-down' : 'trend-up';
  } else {
    // For normal metrics, up is good (green), down is bad (red)
    return numValue > 0 ? 'trend-up' : 'trend-down';
  }
}

function getTrendIcon(value, inverse = false) {
  const numValue = parseFloat(value);
  if (isNaN(numValue) || numValue === 0) return 'fa-minus';
  
  if (inverse) {
    return numValue > 0 ? 'fa-arrow-up' : 'fa-arrow-down';
  } else {
    return numValue > 0 ? 'fa-arrow-up' : 'fa-arrow-down';
  }
}

function formatTrend(value) {
  const numValue = parseFloat(value);
  if (isNaN(numValue) || numValue === 0) return '0';
  if (!isFinite(numValue)) return '0'; // Handle Infinity cases
  return numValue > 0 ? `+${numValue}` : `${numValue}`;
}
%>
