<header>
    <div class="logo">
        <button id="sidebarToggle" class="sidebar-toggle" title="Toggle Sidebar">
            <i class="fas fa-bars"></i>
        </button>
        <img src="/logoF.png" alt="TerraConnection" class="logo-img">
    </div>
    
    <div class="search-container">
        <div class="search-box">
            <input type="text" id="globalSearch" placeholder="Search users, classes, departments..." autocomplete="off">
            <i class="fas fa-search search-icon"></i>
            <div id="searchResults" class="search-results"></div>
        </div>
    </div>
    
    <div class="header-actions d-flex align-items-center gap-3">
        <!-- Theme Toggle -->
        <button class="theme-toggle" title="Toggle theme">
            <i class="fas fa-moon" id="themeIcon"></i>
        </button>
        
        <!-- Notification Bell -->
        <div class="dropdown" id="notificationDropdown">
            <button class="btn btn-link text-decoration-none position-relative" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="color: var(--text-light);">
                <i class="fas fa-bell"></i>
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" id="notificationBadge" style="display: none;">
                    0
                </span>
            </button>
            <ul class="dropdown-menu dropdown-menu-end" style="width: 300px;">
                <li><h6 class="dropdown-header">Notifications</h6></li>
                <li><hr class="dropdown-divider"></li>
                <li class="notification-list">
                    <div id="notificationList" class="notification-items">
                        <div class="text-center text-muted py-3" id="notificationEmptyState">
                            <i class="fas fa-circle-notch fa-spin mb-2"></i>
                            <p class="mb-0">Checking for alerts...</p>
                        </div>
                    </div>
                </li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item text-center" href="/admin/notifications">View all notifications</a></li>
            </ul>
        </div>
        
        <!-- User Dropdown -->
        <div class="dropdown user-dropdown">
            <button class="btn btn-link text-decoration-none d-flex align-items-center gap-2" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="color: var(--text-light);">
                <div class="user-avatar">
                    <%= admin.first_name.charAt(0).toUpperCase() %><%= admin.last_name.charAt(0).toUpperCase() %>
                </div>
                <span class="d-none d-md-inline"><%= admin.first_name %> <%= admin.last_name %></span>
                <i class="fas fa-chevron-down"></i>
            </button>
            <ul class="dropdown-menu dropdown-menu-end">
                <li><h6 class="dropdown-header">User Menu</h6></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="/admin/logout">
                    <i class="fas fa-sign-out-alt me-2"></i>Logout
                </a></li>
            </ul>
        </div>
    </div>
</header>

<script>
$(document).ready(function() {
    // Global search functionality
    let searchTimeout;
    const searchInput = $('#globalSearch');
    const searchResults = $('#searchResults');
    
    searchInput.on('input', function() {
        const query = $(this).val().trim();
        
        clearTimeout(searchTimeout);
        
        if (query.length < 2) {
            searchResults.hide();
            return;
        }
        
        searchTimeout = setTimeout(() => {
            performSearch(query);
        }, 300);
    });
    
    function performSearch(query) {
        $.ajax({
            url: '/admin/api/search',
            method: 'GET',
            data: { q: query },
            success: function(response) {
                displaySearchResults(response);
            },
            error: function() {
                searchResults.html('<div class="search-result-item text-muted">Search temporarily unavailable</div>');
                searchResults.show();
            }
        });
    }
    
    function displaySearchResults(results) {
        if (!results || results.length === 0) {
            searchResults.html('<div class="search-result-item text-muted">No results found</div>');
            searchResults.show();
            return;
        }
        
        let html = '';
        results.forEach(item => {
            const icon = getItemIcon(item.type);
            const url = getItemUrl(item.type, item.id);
            html += `
                <a href="${url}" class="search-result-item">
                    <div class="d-flex align-items-center">
                        <i class="${icon} me-2"></i>
                        <div>
                            <div class="result-title">${item.title}</div>
                            <div class="result-type">${item.type}</div>
                        </div>
                    </div>
                </a>
            `;
        });
        
        searchResults.html(html);
        searchResults.show();
    }
    
    function getItemIcon(type) {
        const icons = {
            'user': 'fas fa-user',
            'department': 'fas fa-building',
            'class': 'fas fa-chalkboard',
            'rfid-card': 'fas fa-id-card'
        };
        return icons[type] || 'fas fa-file';
    }
    
    function getItemUrl(type, id) {
        const urls = {
            'user': `/admin/users/${id}`,
            'department': `/admin/departments/${id}`,
            'class': `/admin/classes/${id}`,
            'rfid-card': `/admin/rfid-cards/${id}`
        };
        return urls[type] || '#';
    }
    
    // Hide search results when clicking outside
    $(document).on('click', function(e) {
        if (!$(e.target).closest('.search-container').length) {
            searchResults.hide();
        }
    });
    
    // Theme icon update
    function updateThemeIcon() {
        const theme = $('html').attr('data-bs-theme');
        const icon = theme === 'light' ? 'fas fa-moon' : 'fas fa-sun';
        $('#themeIcon').attr('class', icon);
    }
    
    // Initial theme icon
    updateThemeIcon();
    
    // Listen for theme changes from layout.ejs
    $(document).on('themeChanged', function() {
        updateThemeIcon();
    });
    
    // Notification handling
    const notificationBadge = $('#notificationBadge');
    const notificationListContainer = $('#notificationList');
    const notificationDropdown = $('#notificationDropdown');
    let lastNotificationFetch = 0;
    let notificationFetchInProgress = false;

    function escapeHtml(text) {
        if (text === null || text === undefined) {
            return '';
        }
        return String(text).replace(/[&<>"'`]/g, function(match) {
            const escapeMap = {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#39;',
                '`': '&#x60;'
            };
            return escapeMap[match] || match;
        });
    }

    function formatTimeAgo(dateInput) {
        if (!dateInput) return 'Just now';
        const date = new Date(dateInput);
        if (Number.isNaN(date.getTime())) return 'Just now';

        const diffMs = Date.now() - date.getTime();
        if (diffMs < 60000) return 'Just now';

        const diffMinutes = Math.floor(diffMs / 60000);
        if (diffMinutes < 60) {
            return `${diffMinutes} minute${diffMinutes !== 1 ? 's' : ''} ago`;
        }

        const diffHours = Math.floor(diffMinutes / 60);
        if (diffHours < 24) {
            return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;
        }

        const diffDays = Math.floor(diffHours / 24);
        if (diffDays < 7) {
            return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;
        }

        return date.toLocaleDateString();
    }

    function getSeverityIcon(severity) {
        const map = {
            'critical': 'fas fa-exclamation-circle text-danger',
            'warning': 'fas fa-exclamation-triangle text-warning',
            'info': 'fas fa-info-circle text-info'
        };
        return map[severity] || map.warning;
    }

    function getSeverityBadgeClass(severity) {
        const map = {
            'critical': 'badge bg-danger',
            'warning': 'badge bg-warning text-dark',
            'info': 'badge bg-info text-dark'
        };
        return map[severity] || 'badge bg-secondary';
    }

    function updateNotificationBadge(count) {
        const parsedCount = Number(count) || 0;
        if (parsedCount > 0) {
            const displayValue = parsedCount > 99 ? '99+' : parsedCount;
            notificationBadge.text(displayValue).show();
        } else {
            notificationBadge.hide();
        }
    }

    function showNotificationLoading() {
        notificationListContainer.html(`
            <div class="text-center text-muted py-3">
                <i class="fas fa-circle-notch fa-spin mb-2"></i>
                <p class="mb-0">Loading alerts...</p>
            </div>
        `);
    }

    function renderNotificationError(message) {
        notificationListContainer.html(`
            <div class="text-center text-muted py-3">
                <i class="fas fa-triangle-exclamation text-warning mb-2"></i>
                <p class="mb-0">${escapeHtml(message)}</p>
            </div>
        `);
    }

    function renderNotifications(notifications, meta) {
        if (!Array.isArray(notifications) || notifications.length === 0) {
            const windowLabel = (meta && typeof meta.windowLabel === 'string') ? meta.windowLabel : 'hour';
            notificationListContainer.html(`
                <div class="text-center text-muted py-3">
                    <i class="fas fa-bell-slash mb-2"></i>
                    <p class="mb-0">No anomaly spikes in the last ${escapeHtml(windowLabel)}.</p>
                </div>
            `);
            return;
        }

        const itemsHtml = notifications.map(notification => {
            const iconClass = getSeverityIcon(notification.severity);
            const badgeClass = getSeverityBadgeClass(notification.severity);
            const countValue = Number(notification.count);
            const hasCount = Number.isFinite(countValue) && countValue > 0;
            const countBadge = hasCount ? `<span class="${badgeClass} ms-2 align-self-start">${countValue}</span>` : '';
            const timeAgo = formatTimeAgo(notification.lastOccurrence || notification.firstOccurrence || notification.timestamp);
            const previousCount = notification.previousCount !== undefined && notification.previousCount !== null
                ? `<div class="small text-muted">Previous: ${escapeHtml(notification.previousCount)}</div>`
                : '';
            const summary = notification.metadata && notification.metadata.latestSummary
                ? `<div class="small text-muted">${escapeHtml(notification.metadata.latestSummary)}</div>`
                : '';
            const departmentInfo = notification.metadata && notification.metadata.department && notification.metadata.department.name
                ? `<div class="small text-muted">${escapeHtml(notification.metadata.department.name)}${notification.metadata.department.code ? ` (${escapeHtml(notification.metadata.department.code)})` : ''}</div>`
                : '';
            const targetUrl = notification.url || '/admin/audit-logs?actionType=ANOMALY_';

            return `
                <a class="dropdown-item d-flex align-items-start gap-2 py-2" href="${targetUrl}">
                    <i class="${iconClass} mt-1"></i>
                    <div class="flex-grow-1">
                        <div class="fw-bold">${escapeHtml(notification.title || 'Alert')}</div>
                        <div class="small text-muted">${escapeHtml(notification.message || '')}</div>
                        ${summary}
                        ${departmentInfo}
                        ${previousCount}
                        <div class="small text-muted">${timeAgo}</div>
                    </div>
                    ${countBadge}
                </a>
            `;
        }).join('');

        notificationListContainer.html(itemsHtml);
    }

    function loadNotifications(forceRefresh = false) {
        if (notificationFetchInProgress) {
            return;
        }

        const now = Date.now();
        if (!forceRefresh && now - lastNotificationFetch < 60000) {
            return;
        }

        notificationFetchInProgress = true;
        showNotificationLoading();

        $.ajax({
            url: '/admin/api/notifications/anomalies',
            method: 'GET',
            data: { window: 'hour' },
            success: function(response) {
                lastNotificationFetch = Date.now();
                notificationFetchInProgress = false;

                if (!response || response.success !== true) {
                    renderNotificationError('Notifications are temporarily unavailable');
                    updateNotificationBadge(0);
                    return;
                }

                const notifications = Array.isArray(response.notifications) ? response.notifications : [];
                updateNotificationBadge(response.badgeCount ?? notifications.length);
                renderNotifications(notifications, response.meta || {});
            },
            error: function() {
                notificationFetchInProgress = false;
                renderNotificationError('Notifications are temporarily unavailable');
                updateNotificationBadge(0);
            }
        });
    }

    notificationDropdown.on('show.bs.dropdown', function() {
        loadNotifications(true);
    });

    loadNotifications(true);
    setInterval(() => loadNotifications(false), 120000);
});
</script>
  
